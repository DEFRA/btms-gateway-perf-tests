<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="btms-gateway-perf-tests Performance Tests" enabled="true">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <stringProp name="TestPlan.comments"></stringProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="Set Https Proxy" enabled="false">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.proxyScheme">https</stringProp>
        <stringProp name="HTTPSampler.proxyHost">${__P(https.proxyHost,)}</stringProp>
        <stringProp name="HTTPSampler.proxyPort">${__P(https.proxyPort,)}</stringProp>
        <stringProp name="HTTPSampler.proxyUser">${__P(https.proxyUser,)}</stringProp>
        <stringProp name="HTTPSampler.proxyPass">${__P(https.proxyPassword,)}</stringProp>
        <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="Setup" enabled="true">
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">stoptest</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Initialise Environment Variables as Props" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">System.setProperty(&quot;java.net.useSystemProxies&quot;, &quot;true&quot;)

def env = System.getenv(&quot;ENVIRONMENT&quot;) ?: &quot;perf-test&quot;

def expectedVars = [
    &quot;BtmsGateway__Host&quot; : &quot;btms-gateway.${env}.cdp-int.defra.cloud&quot;,
    &quot;BtmsGateway__Protocol&quot; : &quot;https&quot;,
    &quot;BtmsPortalFrontend__Host&quot; : &quot;btms-portal-frontend.${env}.cdp-int.defra.cloud&quot;,
    &quot;BtmsPortalFrontend__Protocol&quot; : &quot;https&quot;,
    &quot;TradeImportsDataApi__Host&quot;: &quot;trade-imports-data-api.${env}.cdp-int.defra.cloud&quot;,
    &quot;TradeImportsDataApi__Protocol&quot;: &quot;https&quot;,
    &quot;TradeImportsDecisionComparer__Host&quot;: &quot;trade-imports-decision-comparer.${env}.cdp-int.defra.cloud&quot;,
    &quot;TradeImportsDecisionComparer__Protocol&quot;: &quot;https&quot;,
    &quot;TradeImportsDecisionComparer__AuthToken&quot;: &quot;NODEFAULT&quot;,
    &quot;ServiceBus__Notifications__ConnectionString&quot;: &quot;NODEFAULT&quot;,  
    &quot;ServiceBus__Notifications__Protocol&quot;: &quot;https&quot;,
    &quot;ServiceBus__Gmrs__ConnectionString&quot;: &quot;NODEFAULT&quot;,  
    &quot;ServiceBus__Gmrs__Protocol&quot;: &quot;https&quot;,
    &quot;InitialIpaffsCounterValue&quot;: &quot;7000000&quot;,
    &quot;TradeImportsDataApi_AuthToken&quot;: &quot;NODEFAULT&quot;
]

expectedVars.each { key, defaultValue -&gt;
    def value = System.getenv(key) ?: defaultValue
    props.put(key, value)
    // log.info(&quot;Set JMeter prop: ${key} = ${value}&quot;)
}

SampleResult.setIgnore()</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Set ServiceBus Props" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import java.net.URLEncoder
import javax.crypto.Mac
import javax.crypto.spec.SecretKeySpec
import java.util.Base64

def asbConnections = [
	&apos;ServiceBus__Notifications&apos;,
	&apos;ServiceBus__Gmrs&apos;
]

asbConnections.each { conn -&gt;
	setServiceBusVariables(conn)
}

SampleResult.setIgnore()

def setServiceBusVariables(String connectionName) {
	def connStr = props.get(connectionName + &quot;__ConnectionString&quot;)
	log.info(&quot;ConnectionString for ${connectionName}: ${connStr}&quot;)
	def asb = parseAsbConnectionString(connStr)
	log.info(&quot;Parsed ASB map for ${connectionName}: ${asb}&quot;)

	def host = asb.Endpoint
	log.info(&quot;Endpoint: ${host}&quot;)
	def entityPath = asb.EntityPath
	log.info(&quot;EntityPath: ${entityPath}&quot;)
	def fullUri = &quot;https://${host}/${entityPath}&quot;
	log.info(&quot;Full URI: ${fullUri}&quot;)
	def path = &quot;/${entityPath}/messages&quot;
	log.info(&quot;Path: ${path}&quot;)

	props.put(connectionName + &quot;__Host&quot;, host)
	props.put(connectionName + &quot;__Path&quot;, path)
	props.put(connectionName + &quot;__ResourceUri&quot;, fullUri)
	props.put(connectionName + &quot;__KeyName&quot;, asb.SharedAccessKeyName)
	props.put(connectionName + &quot;__Key&quot;, asb.SharedAccessKey)

	String key = asb.SharedAccessKey
	log.info(&quot;SharedAccessKey: ${key}&quot;)

	int expiryInSeconds = 43200
	log.info(&quot;ExpiryInSeconds: ${expiryInSeconds}&quot;)
	long expiry = (System.currentTimeMillis() / 1000) + expiryInSeconds
	log.info(&quot;Expiry (epoch): ${expiry}&quot;)

	String encodedUri = URLEncoder.encode(fullUri, &quot;UTF-8&quot;)
	log.info(&quot;Encoded URI: ${encodedUri}&quot;)
	String stringToSign = &quot;${encodedUri}\n${expiry}&quot;
	log.info(&quot;StringToSign: ${stringToSign}&quot;)

	Mac hmac = Mac.getInstance(&quot;HmacSHA256&quot;)
	SecretKeySpec secretKey = new SecretKeySpec(key.getBytes(&quot;UTF-8&quot;), &quot;HmacSHA256&quot;)
	hmac.init(secretKey)
	byte[] signatureBytes = hmac.doFinal(stringToSign.getBytes(&quot;UTF-8&quot;))
	log.info(&quot;SignatureBytes (base64 raw): ${Base64.encoder.encodeToString(signatureBytes)}&quot;)

	String encodedSignature = URLEncoder.encode(Base64.encoder.encodeToString(signatureBytes), &quot;UTF-8&quot;)
	log.info(&quot;Encoded Signature: ${encodedSignature}&quot;)

	String token = &quot;SharedAccessSignature sr=${encodedUri}&amp;sig=${encodedSignature}&amp;se=${expiry}&amp;skn=${asb.SharedAccessKeyName}&quot;
	log.info(&quot;Generated SAS token: ${token}&quot;)
	props.put(connectionName + &quot;__AuthToken&quot;, token)

	log.info(&quot;Generated SAS token for: ${entityPath}&quot;)
}

Map parseAsbConnectionString(String str) {
	log.info(&quot;Parsing connection string: ${str}&quot;)
    def map = [:]
    str.split(&apos;;&apos;).each {
        def kv = it.split(&apos;=&apos;, 2)
        if (kv.length == 2) {
            map[kv[0].trim()] = kv[1].trim()
        }
    }
	log.info(&quot;Map after split: ${map}&quot;)
    if (map[&quot;Endpoint&quot;]) {
        map[&quot;Endpoint&quot;] = map[&quot;Endpoint&quot;]
            .replaceFirst(&quot;^sb://&quot;, &quot;&quot;)
            .replaceAll(/\/$/, &quot;&quot;)
        log.info(&quot;Normalized Endpoint: ${map[&apos;Endpoint&apos;]}&quot;)
    }
    return map
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetMaxIpaffsId" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">trade-imports-data-api.perf-test.cdp-int.defra.cloud</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">admin/max-id</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic ${__groovy(props.get(&quot;TradeImportsDataApi_AuthToken&quot;))}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper


def json = new JsonSlurper().parseText(prev.getResponseDataAsString())
def fullId = json.importPreNotification
def id = fullId[-7..-1]
props.put(&apos;InitialIpaffsCounterValue&apos;,(id.toInteger() + 1).toString())</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <OpenModelThreadGroup guiclass="OpenModelThreadGroupGui" testclass="OpenModelThreadGroup" testname="CDS/ALVS" enabled="true">
        <stringProp name="OpenModelThreadGroup.schedule">rate(60/min) even_arrivals(3 min) even_arrivals(1 min) rate(120/min) even_arrivals(3 min) even_arrivals(1 min) rate(180/min) even_arrivals(3 min) even_arrivals(1 min) rate(300/min) even_arrivals(3 min) even_arrivals(1 min) rate(420/min) even_arrivals(5 min) even_arrivals(1 min) rate(540/min) even_arrivals(30 min)</stringProp>
        <stringProp name="OpenModelThreadGroup.random_seed"> </stringProp>
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="OpenModelThreadGroupController"/>
      </OpenModelThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="00.00 - Basic Scenario" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="01.00 Test" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Wait between each request" enabled="true">
              <stringProp name="ConstantTimer.delay">10000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01.01. Send Notification" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;referenceNumber&quot;: &quot;${referenceNumber}&quot;,&#xd;
  &quot;version&quot;: 1,&#xd;
  &quot;lastUpdated&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&apos;Z&apos;)}&quot;,&#xd;
  &quot;lastUpdatedBy&quot;: {&#xd;
    &quot;displayName&quot;: &quot;121b752eb2e43e1201ac433287387f83b604b4045ab489914d27b70d1eda7668&quot;,&#xd;
    &quot;userId&quot;: &quot;3dd58971-2d3f-e911-a95d-000d3a454f67&quot;&#xd;
  },&#xd;
  &quot;type&quot;: &quot;CVEDA&quot;,&#xd;
  &quot;status&quot;: &quot;SUBMITTED&quot;,&#xd;
  &quot;isHighRiskEuImport&quot;: false,&#xd;
  &quot;partOne&quot;: {&#xd;
    &quot;personResponsible&quot;: {&#xd;
      &quot;name&quot;: &quot;d98e8c5c797ba62458fa57cf87bcf82f43abde97b76e1d0290da928b149a6c83&quot;,&#xd;
      &quot;companyId&quot;: &quot;33accdd3-3e46-e911-a956-000d3a454330&quot;,&#xd;
      &quot;companyName&quot;: &quot;61828cac3edbc7102316926bbebd3b44d6098e656e419fb943a437c4495119cb&quot;,&#xd;
      &quot;address&quot;: [&#xd;
        &quot;05cc788e548aafe1d69bbd9daa979e8d8e591b4a83b9c4ad0488aa02aa4de5eb&quot;,&#xd;
        &quot;9c33953fc0e4bb0ca924858f396deb9f980316b967fac01719a05b218764464a&quot;,&#xd;
        &quot;614178008af35a456f1533ecca8ec16959ebb17f4f5806be62999898ff6cda74&quot;,&#xd;
        &quot;3ea54fe2b61490b10b0f4885a2c2f5b7b5038d912cdc5f716f3fc7241c27f72b&quot;&#xd;
      ],&#xd;
      &quot;country&quot;: &quot;GB&quot;,&#xd;
      &quot;tracesID&quot;: 1001,&#xd;
      &quot;phone&quot;: &quot;e312da9c45e934473bb39eaa343cb28a5dc9f37a44f9e3181a263b8b9c23e158&quot;,&#xd;
      &quot;email&quot;: &quot;24f23bc2d21dd27a3c6e1cce57db5464ce0b2db08308eedf06f73ceb642f916c&quot;,&#xd;
      &quot;contactId&quot;: &quot;dfb0eb26-3947-e911-a95e-000d3a454f67&quot;&#xd;
    },&#xd;
    &quot;consignor&quot;: {&#xd;
      &quot;id&quot;: &quot;d297ddad-d8f3-4702-9944-8c1b61a3fe00&quot;,&#xd;
      &quot;type&quot;: &quot;exporter&quot;,&#xd;
      &quot;status&quot;: &quot;nonapproved&quot;,&#xd;
      &quot;companyName&quot;: &quot;5773b816717b9b092c2c220aee782dde39bb7831b4d5edf58e0e9b32075627b1&quot;,&#xd;
      &quot;address&quot;: {&#xd;
        &quot;addressLine1&quot;: &quot;164f2fa51b32d0c536254f4148d5d08192e8532f29c9b5a96f948d1d76487f53&quot;,&#xd;
        &quot;addressLine2&quot;: &quot;84fa335e16360ee2113f1dd42401c74add11ee8bd8ccea6e02b62fc1f2816cd7&quot;,&#xd;
        &quot;city&quot;: &quot;ddf9ff833afd74c162d9cf0484dcd11e5be2ee1ac81425585e4c28d6b81d21e2&quot;,&#xd;
        &quot;postalZipCode&quot;: &quot;1d3c538190d1d3e18f2a38a67e9ec172d1dd1dd02fb9487ea151e8bf08081f78&quot;,&#xd;
        &quot;countryISOCode&quot;: &quot;387711c8993c6b04474abc46266e543de873dd91f54710a2d6aa06a5595f100d&quot;,&#xd;
        &quot;telephone&quot;: &quot;9434c3ae3b04af080fc87166f4efb668755987ee271f869617f5df2e50dddfc7&quot;,&#xd;
        &quot;email&quot;: &quot;4f16f32d9acc9024acdbdaf4eb3dabe4801c4384c57e57db0d4ffd419d5f2765&quot;&#xd;
      },&#xd;
      &quot;tracesId&quot;: 10002944&#xd;
    },&#xd;
    &quot;consignee&quot;: {&#xd;
      &quot;id&quot;: &quot;85c438e6-3686-4062-bf9d-e1d58164a68c&quot;,&#xd;
      &quot;type&quot;: &quot;consignee&quot;,&#xd;
      &quot;status&quot;: &quot;nonapproved&quot;,&#xd;
      &quot;companyName&quot;: &quot;34d858dcb0dcfa39d26fec243af9b70c00d114708a4ea7aef2c0a7ecf5c8da77&quot;,&#xd;
      &quot;address&quot;: {&#xd;
        &quot;addressLine1&quot;: &quot;fee87a8a5e72bb647983a993edd6a249576cf43fda2e1445404f466b6c559dd2&quot;,&#xd;
        &quot;addressLine2&quot;: &quot;6d587ffc47984a864d0bed1f60039a3380af906882126c882147e254d4d88ef5&quot;,&#xd;
        &quot;city&quot;: &quot;7dfaf1dacad4dc1299848bb874191cbfc58f3b89cf5fcdb886bc3d027a4cc196&quot;,&#xd;
        &quot;postalZipCode&quot;: &quot;f548e7c9df24c1d6b012d6877e2244a197e46d47ff0ee3b2cd6acf6a48b65716&quot;,&#xd;
        &quot;countryISOCode&quot;: &quot;4201fd485fee4ab1fd8d001c68d0aa0e6c5bb7fc81c5c4e088757c0060790b2e&quot;,&#xd;
        &quot;telephone&quot;: &quot;9f1eb7fa757784e10e9df982dc6a6bb14364ff936b40c15a9658e8feedbd51cd&quot;,&#xd;
        &quot;email&quot;: &quot;9b1f8ab97bccfba1d74cb42bee64deff2aeb0d0cd43803fb467b35c26066aa23&quot;&#xd;
      },&#xd;
      &quot;tracesId&quot;: 10002945&#xd;
    },&#xd;
    &quot;importer&quot;: {&#xd;
      &quot;id&quot;: &quot;85c438e6-3686-4062-bf9d-e1d58164a68c&quot;,&#xd;
      &quot;type&quot;: &quot;consignee&quot;,&#xd;
      &quot;status&quot;: &quot;nonapproved&quot;,&#xd;
      &quot;companyName&quot;: &quot;34d858dcb0dcfa39d26fec243af9b70c00d114708a4ea7aef2c0a7ecf5c8da77&quot;,&#xd;
      &quot;address&quot;: {&#xd;
        &quot;addressLine1&quot;: &quot;fee87a8a5e72bb647983a993edd6a249576cf43fda2e1445404f466b6c559dd2&quot;,&#xd;
        &quot;addressLine2&quot;: &quot;6d587ffc47984a864d0bed1f60039a3380af906882126c882147e254d4d88ef5&quot;,&#xd;
        &quot;city&quot;: &quot;7dfaf1dacad4dc1299848bb874191cbfc58f3b89cf5fcdb886bc3d027a4cc196&quot;,&#xd;
        &quot;postalZipCode&quot;: &quot;f548e7c9df24c1d6b012d6877e2244a197e46d47ff0ee3b2cd6acf6a48b65716&quot;,&#xd;
        &quot;countryISOCode&quot;: &quot;4201fd485fee4ab1fd8d001c68d0aa0e6c5bb7fc81c5c4e088757c0060790b2e&quot;,&#xd;
        &quot;telephone&quot;: &quot;9f1eb7fa757784e10e9df982dc6a6bb14364ff936b40c15a9658e8feedbd51cd&quot;,&#xd;
        &quot;email&quot;: &quot;9b1f8ab97bccfba1d74cb42bee64deff2aeb0d0cd43803fb467b35c26066aa23&quot;&#xd;
      },&#xd;
      &quot;tracesId&quot;: 10002945&#xd;
    },&#xd;
    &quot;placeOfDestination&quot;: {&#xd;
      &quot;id&quot;: &quot;85c438e6-3686-4062-bf9d-e1d58164a68c&quot;,&#xd;
      &quot;type&quot;: &quot;consignee&quot;,&#xd;
      &quot;status&quot;: &quot;nonapproved&quot;,&#xd;
      &quot;companyName&quot;: &quot;34d858dcb0dcfa39d26fec243af9b70c00d114708a4ea7aef2c0a7ecf5c8da77&quot;,&#xd;
      &quot;address&quot;: {&#xd;
        &quot;addressLine1&quot;: &quot;fee87a8a5e72bb647983a993edd6a249576cf43fda2e1445404f466b6c559dd2&quot;,&#xd;
        &quot;addressLine2&quot;: &quot;6d587ffc47984a864d0bed1f60039a3380af906882126c882147e254d4d88ef5&quot;,&#xd;
        &quot;city&quot;: &quot;7dfaf1dacad4dc1299848bb874191cbfc58f3b89cf5fcdb886bc3d027a4cc196&quot;,&#xd;
        &quot;postalZipCode&quot;: &quot;f548e7c9df24c1d6b012d6877e2244a197e46d47ff0ee3b2cd6acf6a48b65716&quot;,&#xd;
        &quot;countryISOCode&quot;: &quot;4201fd485fee4ab1fd8d001c68d0aa0e6c5bb7fc81c5c4e088757c0060790b2e&quot;,&#xd;
        &quot;telephone&quot;: &quot;9f1eb7fa757784e10e9df982dc6a6bb14364ff936b40c15a9658e8feedbd51cd&quot;,&#xd;
        &quot;email&quot;: &quot;9b1f8ab97bccfba1d74cb42bee64deff2aeb0d0cd43803fb467b35c26066aa23&quot;&#xd;
      },&#xd;
      &quot;tracesId&quot;: 10002945&#xd;
    },&#xd;
    &quot;commodities&quot;: {&#xd;
      &quot;numberOfPackages&quot;: 10,&#xd;
      &quot;numberOfAnimals&quot;: 4233,&#xd;
      &quot;commodityComplement&quot;: [&#xd;
        {&#xd;
          &quot;commodityID&quot;: &quot;03011100&quot;,&#xd;
          &quot;commodityDescription&quot;: &quot;Freshwater fish&quot;,&#xd;
          &quot;complementID&quot;: 237020,&#xd;
          &quot;complementName&quot;: &quot;Other freshwater fish&quot;,&#xd;
          &quot;speciesID&quot;: &quot;300832&quot;,&#xd;
          &quot;speciesName&quot;: &quot;Other freshwater fish&quot;,&#xd;
          &quot;speciesType&quot;: &quot;2&quot;,&#xd;
          &quot;speciesClass&quot;: &quot;315137&quot;,&#xd;
          &quot;speciesNomination&quot;: &quot;Other freshwater fish&quot;,&#xd;
          &quot;isCdsMatched&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;commodityID&quot;: &quot;030760&quot;,&#xd;
          &quot;commodityDescription&quot;: &quot;Snails, other than sea snails&quot;,&#xd;
          &quot;complementID&quot;: 237024,&#xd;
          &quot;complementName&quot;: &quot;Gasteropoda&quot;,&#xd;
          &quot;speciesID&quot;: &quot;37579&quot;,&#xd;
          &quot;speciesName&quot;: &quot;Gasteropoda&quot;,&#xd;
          &quot;speciesTypeName&quot;: &quot;Aquarium&quot;,&#xd;
          &quot;speciesType&quot;: &quot;1&quot;,&#xd;
          &quot;speciesClass&quot;: &quot;37579&quot;,&#xd;
          &quot;speciesNomination&quot;: &quot;Gasteropoda&quot;,&#xd;
          &quot;isCdsMatched&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;commodityID&quot;: &quot;03079100&quot;,&#xd;
          &quot;commodityDescription&quot;: &quot;Live, fresh or chilled&quot;,&#xd;
          &quot;complementID&quot;: 237026,&#xd;
          &quot;complementName&quot;: &quot;Other Mollusca&quot;,&#xd;
          &quot;speciesID&quot;: &quot;332694&quot;,&#xd;
          &quot;speciesName&quot;: &quot;Other Mollusca&quot;,&#xd;
          &quot;speciesTypeName&quot;: &quot;Aquarium&quot;,&#xd;
          &quot;speciesType&quot;: &quot;1&quot;,&#xd;
          &quot;speciesClass&quot;: &quot;36704&quot;,&#xd;
          &quot;speciesNomination&quot;: &quot;Other Mollusca&quot;,&#xd;
          &quot;isCdsMatched&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;commodityID&quot;: &quot;03011900&quot;,&#xd;
          &quot;commodityDescription&quot;: &quot;Other than 0301 11 00&quot;,&#xd;
          &quot;complementID&quot;: 237027,&#xd;
          &quot;complementName&quot;: &quot;Acanthurus leucosternon&quot;,&#xd;
          &quot;speciesID&quot;: &quot;293770&quot;,&#xd;
          &quot;speciesName&quot;: &quot;Acanthurus leucosternon&quot;,&#xd;
          &quot;speciesType&quot;: &quot;2&quot;,&#xd;
          &quot;speciesClass&quot;: &quot;133301&quot;,&#xd;
          &quot;speciesNomination&quot;: &quot;Acanthurus leucosternon&quot;,&#xd;
          &quot;isCdsMatched&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;commodityID&quot;: &quot;03089010&quot;,&#xd;
          &quot;commodityDescription&quot;: &quot;Live, fresh or chilled&quot;,&#xd;
          &quot;complementID&quot;: 237028,&#xd;
          &quot;complementName&quot;: &quot;Actiniaria&quot;,&#xd;
          &quot;speciesID&quot;: &quot;160028&quot;,&#xd;
          &quot;speciesName&quot;: &quot;Actiniaria&quot;,&#xd;
          &quot;speciesTypeName&quot;: &quot;Aquarium&quot;,&#xd;
          &quot;speciesType&quot;: &quot;1&quot;,&#xd;
          &quot;speciesClass&quot;: &quot;133305&quot;,&#xd;
          &quot;speciesNomination&quot;: &quot;Actiniaria&quot;,&#xd;
          &quot;isCdsMatched&quot;: true&#xd;
        }&#xd;
      ],&#xd;
      &quot;complementParameterSet&quot;: [&#xd;
        {&#xd;
          &quot;uniqueComplementID&quot;: &quot;ee2ff620-5b1c-4215-bcfe-16667b03b24c&quot;,&#xd;
          &quot;complementID&quot;: 237020,&#xd;
          &quot;speciesID&quot;: &quot;300832&quot;,&#xd;
          &quot;keyDataPair&quot;: [&#xd;
            {&#xd;
              &quot;key&quot;: &quot;number_package&quot;,&#xd;
              &quot;data&quot;: &quot;6&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;number_animal&quot;,&#xd;
              &quot;data&quot;: &quot;4143&quot;&#xd;
            }&#xd;
          ]&#xd;
        },&#xd;
        {&#xd;
          &quot;uniqueComplementID&quot;: &quot;9547a2c8-8cf7-4f01-ac86-3d14f7800749&quot;,&#xd;
          &quot;complementID&quot;: 237024,&#xd;
          &quot;speciesID&quot;: &quot;37579&quot;,&#xd;
          &quot;keyDataPair&quot;: [&#xd;
            {&#xd;
              &quot;key&quot;: &quot;number_package&quot;,&#xd;
              &quot;data&quot;: &quot;1&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;number_animal&quot;,&#xd;
              &quot;data&quot;: &quot;50&quot;&#xd;
            }&#xd;
          ]&#xd;
        },&#xd;
        {&#xd;
          &quot;uniqueComplementID&quot;: &quot;09331178-6d2b-4f75-b37f-2fd81121e947&quot;,&#xd;
          &quot;complementID&quot;: 237026,&#xd;
          &quot;speciesID&quot;: &quot;332694&quot;,&#xd;
          &quot;keyDataPair&quot;: [&#xd;
            {&#xd;
              &quot;key&quot;: &quot;number_package&quot;,&#xd;
              &quot;data&quot;: &quot;1&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;number_animal&quot;,&#xd;
              &quot;data&quot;: &quot;10&quot;&#xd;
            }&#xd;
          ]&#xd;
        },&#xd;
        {&#xd;
          &quot;uniqueComplementID&quot;: &quot;b92786d2-c85a-466c-b2cb-000e20ae7f1b&quot;,&#xd;
          &quot;complementID&quot;: 237027,&#xd;
          &quot;speciesID&quot;: &quot;293770&quot;,&#xd;
          &quot;keyDataPair&quot;: [&#xd;
            {&#xd;
              &quot;key&quot;: &quot;number_package&quot;,&#xd;
              &quot;data&quot;: &quot;1&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;number_animal&quot;,&#xd;
              &quot;data&quot;: &quot;25&quot;&#xd;
            }&#xd;
          ]&#xd;
        },&#xd;
        {&#xd;
          &quot;uniqueComplementID&quot;: &quot;cf2f4291-3d12-41dd-8657-bb7cf1d669ee&quot;,&#xd;
          &quot;complementID&quot;: 237028,&#xd;
          &quot;speciesID&quot;: &quot;160028&quot;,&#xd;
          &quot;keyDataPair&quot;: [&#xd;
            {&#xd;
              &quot;key&quot;: &quot;number_package&quot;,&#xd;
              &quot;data&quot;: &quot;1&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;number_animal&quot;,&#xd;
              &quot;data&quot;: &quot;5&quot;&#xd;
            }&#xd;
          ]&#xd;
        }&#xd;
      ],&#xd;
      &quot;includeNonAblactedAnimals&quot;: false,&#xd;
      &quot;countryOfOrigin&quot;: &quot;LK&quot;,&#xd;
      &quot;animalsCertifiedAs&quot;: &quot;Pets&quot;&#xd;
    },&#xd;
    &quot;purpose&quot;: {&#xd;
      &quot;forImportOrAdmission&quot;: &quot;Definitive import&quot;,&#xd;
      &quot;purposeGroup&quot;: &quot;For Re-Import&quot;&#xd;
    },&#xd;
    &quot;pointOfEntry&quot;: &quot;GBMNC4&quot;,&#xd;
    &quot;arrivalDate&quot;: &quot;2024-12-04&quot;,&#xd;
    &quot;arrivalTime&quot;: &quot;06:05:00&quot;,&#xd;
    &quot;transporter&quot;: {&#xd;
      &quot;id&quot;: &quot;cf265f1e-c0b8-487a-92dd-608f9e7d5766&quot;,&#xd;
      &quot;type&quot;: &quot;commercial transporter&quot;,&#xd;
      &quot;status&quot;: &quot;approved&quot;,&#xd;
      &quot;companyName&quot;: &quot;70e287da66d7dfafec2c43443d87139b01902f983d104870066532de5c5541e0&quot;,&#xd;
      &quot;individualName&quot;: &quot;965e1fc96c692fa8a24f089ad1d733ad5da6ba8c6d6321abaf64cd8ec3abbec0&quot;,&#xd;
      &quot;approvalNumber&quot;: &quot;dddefd7c215a6bf0bda517d38938b17d203b90446fb67b6dd27e97896e00386c&quot;,&#xd;
      &quot;address&quot;: {&#xd;
        &quot;addressLine1&quot;: &quot;62e4effd1657661da941838c68bef45746805c7826648312466a1ae88833612c&quot;,&#xd;
        &quot;addressLine2&quot;: &quot;663682a2f937c7b12176a78a3cbe3c42a2e4d00e32e58453a10d81960d4cecef&quot;,&#xd;
        &quot;addressLine3&quot;: &quot;05cc788e548aafe1d69bbd9daa979e8d8e591b4a83b9c4ad0488aa02aa4de5eb&quot;,&#xd;
        &quot;city&quot;: &quot;f046c94873953061c966173cc22645ed3b49fa5af7cbafee42e4258590b82510&quot;,&#xd;
        &quot;postalZipCode&quot;: &quot;3ea54fe2b61490b10b0f4885a2c2f5b7b5038d912cdc5f716f3fc7241c27f72b&quot;,&#xd;
        &quot;countryISOCode&quot;: &quot;4201fd485fee4ab1fd8d001c68d0aa0e6c5bb7fc81c5c4e088757c0060790b2e&quot;&#xd;
      },&#xd;
      &quot;tracesId&quot;: 10393170&#xd;
    },&#xd;
    &quot;meansOfTransport&quot;: {&#xd;
      &quot;id&quot;: &quot;27e055d0a84efd377e14b42107bf877c4538154161ce703361513bb57cb0f0c7&quot;,&#xd;
      &quot;type&quot;: &quot;Road Vehicle&quot;,&#xd;
      &quot;document&quot;: &quot;97a96686266878ae37604d6130e89e04291f30abc20fc012ba632a1e9b1f7b0d&quot;&#xd;
    },&#xd;
    &quot;meansOfTransportFromEntryPoint&quot;: {&#xd;
      &quot;id&quot;: &quot;c0f572432da3e33692250ceb88a3a183cc011d1e30207b7136d70580bd28c08c&quot;,&#xd;
      &quot;type&quot;: &quot;Aeroplane&quot;,&#xd;
      &quot;document&quot;: &quot;0699f2aec6df2aa1e89471d14fa3b0fee6882090af64f07720be4e6ddc61411b&quot;&#xd;
    },&#xd;
    &quot;departureDate&quot;: &quot;2024-12-04&quot;,&#xd;
    &quot;departureTime&quot;: &quot;10:05:00&quot;,&#xd;
    &quot;estimatedJourneyTimeInMinutes&quot;: 5,&#xd;
    &quot;responsibleForTransport&quot;: &quot;Lincs Aquatics&quot;,&#xd;
    &quot;veterinaryInformation&quot;: {&#xd;
      &quot;accompanyingDocuments&quot;: [&#xd;
        {&#xd;
          &quot;documentType&quot;: &quot;latestVeterinaryHealthCertificate&quot;,&#xd;
          &quot;documentReference&quot;: &quot;DAPH/VRA/4/1/4/1-(2024)-1764&quot;,&#xd;
          &quot;documentIssueDate&quot;: &quot;2024-12-03&quot;,&#xd;
          &quot;attachmentId&quot;: &quot;dbb75b5c-48a0-4d7e-a7da-0e27c500617d&quot;,&#xd;
          &quot;attachmentFilename&quot;: &quot;Health Certificate and .pdf&quot;,&#xd;
          &quot;attachmentContentType&quot;: &quot;application/pdf&quot;,&#xd;
          &quot;uploadUserId&quot;: &quot;dfb0eb26-3947-e911-a95e-000d3a454f67&quot;,&#xd;
          &quot;uploadOrganisationId&quot;: &quot;33accdd3-3e46-e911-a956-000d3a454330&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;documentType&quot;: &quot;airWaybill&quot;,&#xd;
          &quot;documentReference&quot;: &quot;157-38881975&quot;,&#xd;
          &quot;documentIssueDate&quot;: &quot;2024-11-28&quot;,&#xd;
          &quot;attachmentId&quot;: &quot;8fb9ff36-29e2-44ac-ba8c-f9cacbb03786&quot;,&#xd;
          &quot;attachmentFilename&quot;: &quot;AWB.pdf&quot;,&#xd;
          &quot;attachmentContentType&quot;: &quot;application/pdf&quot;,&#xd;
          &quot;uploadUserId&quot;: &quot;dfb0eb26-3947-e911-a95e-000d3a454f67&quot;,&#xd;
          &quot;uploadOrganisationId&quot;: &quot;33accdd3-3e46-e911-a956-000d3a454330&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;identificationDetails&quot;: [&#xd;
        {}&#xd;
      ]&#xd;
    },&#xd;
    &quot;route&quot;: {},&#xd;
    &quot;submissionDate&quot;: &quot;2024-12-03T14:54:43.083764875Z&quot;,&#xd;
    &quot;submittedBy&quot;: {&#xd;
      &quot;displayName&quot;: &quot;d98e8c5c797ba62458fa57cf87bcf82f43abde97b76e1d0290da928b149a6c83&quot;,&#xd;
      &quot;userId&quot;: &quot;dfb0eb26-3947-e911-a95e-000d3a454f67&quot;&#xd;
    },&#xd;
    &quot;complexCommoditySelected&quot;: true&#xd;
  },&#xd;
  &quot;decisionBy&quot;: {&#xd;
    &quot;displayName&quot;: &quot;121b752eb2e43e1201ac433287387f83b604b4045ab489914d27b70d1eda7668&quot;,&#xd;
    &quot;userId&quot;: &quot;3dd58971-2d3f-e911-a95d-000d3a454f67&quot;&#xd;
  },&#xd;
  &quot;decisionDate&quot;: &quot;2024-12-04T11:03:22.103167096Z&quot;,&#xd;
  &quot;partTwo&quot;: {&#xd;
    &quot;decision&quot;: {&#xd;
      &quot;consignmentAcceptable&quot;: true,&#xd;
      &quot;decision&quot;: &quot;Acceptable for Internal Market&quot;&#xd;
    },&#xd;
    &quot;consignmentCheck&quot;: {&#xd;
      &quot;euStandard&quot;: &quot;Not Set&quot;,&#xd;
      &quot;documentCheckResult&quot;: &quot;Satisfactory&quot;,&#xd;
      &quot;nationalRequirements&quot;: &quot;Not Set&quot;,&#xd;
      &quot;additionalGuarantees&quot;: &quot;Not Set&quot;,&#xd;
      &quot;identityCheckResult&quot;: &quot;Satisfactory&quot;,&#xd;
      &quot;physicalCheckResult&quot;: &quot;Satisfactory&quot;,&#xd;
      &quot;welfareCheck&quot;: &quot;Satisfactory&quot;,&#xd;
      &quot;numberOfAnimalsChecked&quot;: 505&#xd;
    },&#xd;
    &quot;impactOfTransportOnAnimals&quot;: {&#xd;
      &quot;numberOfDeadAnimals&quot;: 2,&#xd;
      &quot;numberOfDeadAnimalsUnit&quot;: &quot;number&quot;,&#xd;
      &quot;numberOfUnfitAnimalsUnit&quot;: &quot;number&quot;&#xd;
    },&#xd;
    &quot;laboratoryTestsRequired&quot;: false,&#xd;
    &quot;resealedContainersIncluded&quot;: false,&#xd;
    &quot;controlAuthority&quot;: {&#xd;
      &quot;officialVeterinarian&quot;: {&#xd;
        &quot;firstName&quot;: &quot;551f01986d5c1a85381b920d37fb7563ec31720839babda2fa3b81b3bf2c3481&quot;,&#xd;
        &quot;lastName&quot;: &quot;63e37aad07e6e7d285cbe93f96933423ca4b43db800662f803e570ec88f5b9d8&quot;,&#xd;
        &quot;email&quot;: &quot;60391d5a51655a1fbe29db91367f49610c2259dbe3ef31eb623e85eb509d6c57&quot;,&#xd;
        &quot;phone&quot;: &quot;c7fd4c237bcc57481e87de7624a6549527e7cbfcefb6f959e8f4cfed9fb4b5a2&quot;,&#xd;
        &quot;signed&quot;: &quot;2024-12-04T11:03:22.1326946&quot;&#xd;
      }&#xd;
    },&#xd;
    &quot;bipLocalReferenceNumber&quot;: &quot;f3317e6cc2881afb813f8dfcb21ce18d084e3d5c506c322a887caf70bc123e41&quot;&#xd;
  },&#xd;
  &quot;etag&quot;: &quot;0000000004504BB3&quot;,&#xd;
  &quot;isCdsFullMatched&quot;: true,&#xd;
  &quot;chedTypeVersion&quot;: 1&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__groovy(props.get(&apos;ServiceBus__Notifications__Host&apos;))}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__groovy(props.get(&quot;ServiceBus__Notifications__Path&quot;))}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.proxyScheme">https</stringProp>
              <stringProp name="HTTPSampler.proxyHost">${__P(https.proxyHost,)}</stringProp>
              <stringProp name="HTTPSampler.proxyPort">${__P(https.proxyPort,)}</stringProp>
              <stringProp name="HTTPSampler.proxyUser">${__P(https.proxyUser,)}</stringProp>
              <stringProp name="HTTPSampler.proxyPass">${__P(https.proxyPassword,)}</stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="ipaffsCounter" enabled="true">
                <stringProp name="CounterConfig.start">${__groovy(Integer.parseInt(props.get(&quot;InitialIpaffsCounterValue&quot;)))}</stringProp>
                <stringProp name="CounterConfig.end">9999999</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">ipaffsCounter</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">false</boolProp>
              </CounterConfig>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Use Proxy" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">def proxyHost = System.getProperty(&quot;https.proxyHost&quot;)
def proxyPort = System.getProperty(&quot;https.proxyPort&quot;)
def proxyUser = System.getProperty(&quot;https.proxyUser&quot;)
def proxyPass = System.getProperty(&quot;https.proxyPassword&quot;)
def proxyScheme = &quot;https&quot;

import org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase

if (sampler instanceof HTTPSamplerBase) {
    sampler.setDomain(proxyHost)
    sampler.setPort(proxyPort)
    sampler.setProtocol(proxyScheme)

    if (proxyUser &amp;&amp; proxyPass) {
        sampler.setProperty(&quot;HTTPSampler.proxyUser&quot;, proxyUser)
        sampler.setProperty(&quot;HTTPSampler.proxyPass&quot;, proxyPass)
    }

    log.info(&quot;Applied proxy config to sampler: ${proxyHost}:${proxyPort} (${proxyScheme})&quot;)
}
</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate random Notification data" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">//def suffix = String.format(&quot;%07d&quot;, new Random().nextInt(1_000_000))

def suffix = vars.get(&quot;ipaffsCounter&quot;)

def ref = &quot;CHEDA.GB.2023.${suffix}&quot;
//log.info(&apos;CHED: &apos; + ref)
vars.put(&quot;referenceNumber&quot;, ref)</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${__groovy(props.get(&quot;ServiceBus__Notifications__AuthToken&quot;))}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Update Sample Label" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">prev.responseData
prev.setSampleLabel(&apos;Send Notification: &apos; + vars.get(&apos;referenceNumber&apos;))</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01.02. Send Clearance Request" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${soapBody}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__groovy(props.get(&apos;BtmsGateway__Host&apos;))}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/ITSW/CDS/SubmitImportDocumentCDSFacadeService</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Prepare SOAP body" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter
import java.text.SimpleDateFormat

def randomAlphanum(int len) {
    def chars = (&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)
    (1..len).collect { chars[new Random().nextInt(chars.size())] }.join()
}

def createRandomDucr() {
    def rnd = new Random()
    def timePart = new SimpleDateFormat(&quot;HHmmss&quot;).format(new Date())
    def digitsNeeded = 12 - timePart.length()
    def randDigits   = (1..digitsNeeded).collect{ rnd.nextInt(10) }.join()
    def block1       = &quot;4GB&quot; + timePart + randDigits
    def letters      = (&apos;A&apos;..&apos;Z&apos;).join()
    def block2Letters= (1..2).collect{ letters[rnd.nextInt(letters.size())] }.join()
    def block2Digits = (1..4).collect{ rnd.nextInt(10) }.join()
    def block2       = block2Letters + block2Digits
    def block3d1     = (1..2).collect{ rnd.nextInt(10) }.join()
    def block3l      = (1..3).collect{ letters[rnd.nextInt(letters.size())] }.join()
    def block3d2     = (1..5).collect{ rnd.nextInt(10) }.join()
    def block3       = block3d1 + block3l + block3d2
    return &quot;${block1}-${block2}-${block3}&quot;
}

def timestamp         = ZonedDateTime.now().withNano(0).format(DateTimeFormatter.ISO_OFFSET_DATE_TIME)
def correlationId     = (Math.floor(1e11 + Math.random() * 9e11) as long).toString()
def entryRef          = &quot;25GB&quot; + randomAlphanum(14)
def documentReference = vars.get(&apos;referenceNumber&apos;)
def ducr              = createRandomDucr()

vars.put(&apos;ducr&apos;, ducr)
vars.put(&apos;mrn&apos;, entryRef)

def soapXml = &quot;&quot;&quot;
&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;
               xmlns:oas=&quot;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd&quot;&gt;
  &lt;soap:Header&gt;
    &lt;oas:Security soap:role=&quot;system&quot; soap:mustUnderstand=&quot;true&quot;&gt;
      &lt;oas:UsernameToken/&gt;
    &lt;/oas:Security&gt;
  &lt;/soap:Header&gt;
  &lt;soap:Body&gt;
    &lt;ALVSClearanceRequest xmlns=&quot;http://submitimportdocumenthmrcfacade.types.esb.ws.cara.defra.com&quot;&gt;
      &lt;ServiceHeader&gt;
        &lt;SourceSystem&gt;CDS&lt;/SourceSystem&gt;
        &lt;DestinationSystem&gt;ALVS&lt;/DestinationSystem&gt;
        &lt;CorrelationId&gt;${correlationId}&lt;/CorrelationId&gt;
        &lt;ServiceCallTimestamp&gt;${timestamp}&lt;/ServiceCallTimestamp&gt;
      &lt;/ServiceHeader&gt;
      &lt;Header&gt;
        &lt;EntryReference&gt;${entryRef}&lt;/EntryReference&gt;
        &lt;EntryVersionNumber&gt;1&lt;/EntryVersionNumber&gt;
        &lt;DeclarationUCR&gt;${ducr}&lt;/DeclarationUCR&gt;
        &lt;DeclarationType&gt;S&lt;/DeclarationType&gt;
        &lt;SubmitterTURN&gt;GB998038429000&lt;/SubmitterTURN&gt;
        &lt;DeclarantId&gt;GB998038429000&lt;/DeclarantId&gt;
        &lt;DeclarantName&gt;GB998038429000&lt;/DeclarantName&gt;
        &lt;DispatchCountryCode&gt;MA&lt;/DispatchCountryCode&gt;
        &lt;GoodsLocationCode&gt;DEUDEUDEU&lt;/GoodsLocationCode&gt;
      &lt;/Header&gt;
      &lt;Item&gt;
        &lt;ItemNumber&gt;1&lt;/ItemNumber&gt;
        &lt;CustomsProcedureCode&gt;4000000&lt;/CustomsProcedureCode&gt;
        &lt;TaricCommodityCode&gt;0301110000&lt;/TaricCommodityCode&gt;
        &lt;GoodsDescription&gt;6 CARTONS OF LIVE FRESHWATER FISH&lt;/GoodsDescription&gt;
        &lt;ConsigneeId&gt;GB999900746000&lt;/ConsigneeId&gt;
        &lt;ConsigneeName&gt;GB999900746000&lt;/ConsigneeName&gt;
        &lt;ItemNetMass&gt;150&lt;/ItemNetMass&gt;
        &lt;ItemOriginCountryCode&gt;FR&lt;/ItemOriginCountryCode&gt;
        &lt;Document&gt;
          &lt;DocumentCode&gt;C640&lt;/DocumentCode&gt;
          &lt;DocumentReference&gt;${documentReference}&lt;/DocumentReference&gt;
          &lt;DocumentStatus&gt;AE&lt;/DocumentStatus&gt;
          &lt;DocumentControl&gt;P&lt;/DocumentControl&gt;
        &lt;/Document&gt;
        &lt;Check&gt;
          &lt;CheckCode&gt;H221&lt;/CheckCode&gt;
          &lt;DepartmentCode&gt;AHVLA&lt;/DepartmentCode&gt;
        &lt;/Check&gt;
      &lt;/Item&gt;
    &lt;/ALVSClearanceRequest&gt;
  &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;
&quot;&quot;&quot;

vars.put(&apos;soapBody&apos;, soapXml)
</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Update Sample Label" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">prev.setSampleLabel(&apos;Send Clearance Request: &apos; + vars.get(&apos;mrn&apos;))</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01.03. Send Notification Update" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;referenceNumber&quot;: &quot;${referenceNumber}&quot;,&#xd;
  &quot;version&quot;: 2,&#xd;
  &quot;lastUpdated&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&apos;Z&apos;)}&quot;,&#xd;
  &quot;lastUpdatedBy&quot;: {&#xd;
    &quot;displayName&quot;: &quot;121b752eb2e43e1201ac433287387f83b604b4045ab489914d27b70d1eda7668&quot;,&#xd;
    &quot;userId&quot;: &quot;3dd58971-2d3f-e911-a95d-000d3a454f67&quot;&#xd;
  },&#xd;
  &quot;type&quot;: &quot;CVEDA&quot;,&#xd;
  &quot;status&quot;: &quot;VALIDATED&quot;,&#xd;
  &quot;isHighRiskEuImport&quot;: false,&#xd;
  &quot;partOne&quot;: {&#xd;
    &quot;personResponsible&quot;: {&#xd;
      &quot;name&quot;: &quot;d98e8c5c797ba62458fa57cf87bcf82f43abde97b76e1d0290da928b149a6c83&quot;,&#xd;
      &quot;companyId&quot;: &quot;33accdd3-3e46-e911-a956-000d3a454330&quot;,&#xd;
      &quot;companyName&quot;: &quot;61828cac3edbc7102316926bbebd3b44d6098e656e419fb943a437c4495119cb&quot;,&#xd;
      &quot;address&quot;: [&#xd;
        &quot;05cc788e548aafe1d69bbd9daa979e8d8e591b4a83b9c4ad0488aa02aa4de5eb&quot;,&#xd;
        &quot;9c33953fc0e4bb0ca924858f396deb9f980316b967fac01719a05b218764464a&quot;,&#xd;
        &quot;614178008af35a456f1533ecca8ec16959ebb17f4f5806be62999898ff6cda74&quot;,&#xd;
        &quot;3ea54fe2b61490b10b0f4885a2c2f5b7b5038d912cdc5f716f3fc7241c27f72b&quot;&#xd;
      ],&#xd;
      &quot;country&quot;: &quot;GB&quot;,&#xd;
      &quot;tracesID&quot;: 1001,&#xd;
      &quot;phone&quot;: &quot;e312da9c45e934473bb39eaa343cb28a5dc9f37a44f9e3181a263b8b9c23e158&quot;,&#xd;
      &quot;email&quot;: &quot;24f23bc2d21dd27a3c6e1cce57db5464ce0b2db08308eedf06f73ceb642f916c&quot;,&#xd;
      &quot;contactId&quot;: &quot;dfb0eb26-3947-e911-a95e-000d3a454f67&quot;&#xd;
    },&#xd;
    &quot;consignor&quot;: {&#xd;
      &quot;id&quot;: &quot;d297ddad-d8f3-4702-9944-8c1b61a3fe00&quot;,&#xd;
      &quot;type&quot;: &quot;exporter&quot;,&#xd;
      &quot;status&quot;: &quot;nonapproved&quot;,&#xd;
      &quot;companyName&quot;: &quot;5773b816717b9b092c2c220aee782dde39bb7831b4d5edf58e0e9b32075627b1&quot;,&#xd;
      &quot;address&quot;: {&#xd;
        &quot;addressLine1&quot;: &quot;164f2fa51b32d0c536254f4148d5d08192e8532f29c9b5a96f948d1d76487f53&quot;,&#xd;
        &quot;addressLine2&quot;: &quot;84fa335e16360ee2113f1dd42401c74add11ee8bd8ccea6e02b62fc1f2816cd7&quot;,&#xd;
        &quot;city&quot;: &quot;ddf9ff833afd74c162d9cf0484dcd11e5be2ee1ac81425585e4c28d6b81d21e2&quot;,&#xd;
        &quot;postalZipCode&quot;: &quot;1d3c538190d1d3e18f2a38a67e9ec172d1dd1dd02fb9487ea151e8bf08081f78&quot;,&#xd;
        &quot;countryISOCode&quot;: &quot;387711c8993c6b04474abc46266e543de873dd91f54710a2d6aa06a5595f100d&quot;,&#xd;
        &quot;telephone&quot;: &quot;9434c3ae3b04af080fc87166f4efb668755987ee271f869617f5df2e50dddfc7&quot;,&#xd;
        &quot;email&quot;: &quot;4f16f32d9acc9024acdbdaf4eb3dabe4801c4384c57e57db0d4ffd419d5f2765&quot;&#xd;
      },&#xd;
      &quot;tracesId&quot;: 10002944&#xd;
    },&#xd;
    &quot;consignee&quot;: {&#xd;
      &quot;id&quot;: &quot;85c438e6-3686-4062-bf9d-e1d58164a68c&quot;,&#xd;
      &quot;type&quot;: &quot;consignee&quot;,&#xd;
      &quot;status&quot;: &quot;nonapproved&quot;,&#xd;
      &quot;companyName&quot;: &quot;34d858dcb0dcfa39d26fec243af9b70c00d114708a4ea7aef2c0a7ecf5c8da77&quot;,&#xd;
      &quot;address&quot;: {&#xd;
        &quot;addressLine1&quot;: &quot;fee87a8a5e72bb647983a993edd6a249576cf43fda2e1445404f466b6c559dd2&quot;,&#xd;
        &quot;addressLine2&quot;: &quot;6d587ffc47984a864d0bed1f60039a3380af906882126c882147e254d4d88ef5&quot;,&#xd;
        &quot;city&quot;: &quot;7dfaf1dacad4dc1299848bb874191cbfc58f3b89cf5fcdb886bc3d027a4cc196&quot;,&#xd;
        &quot;postalZipCode&quot;: &quot;f548e7c9df24c1d6b012d6877e2244a197e46d47ff0ee3b2cd6acf6a48b65716&quot;,&#xd;
        &quot;countryISOCode&quot;: &quot;4201fd485fee4ab1fd8d001c68d0aa0e6c5bb7fc81c5c4e088757c0060790b2e&quot;,&#xd;
        &quot;telephone&quot;: &quot;9f1eb7fa757784e10e9df982dc6a6bb14364ff936b40c15a9658e8feedbd51cd&quot;,&#xd;
        &quot;email&quot;: &quot;9b1f8ab97bccfba1d74cb42bee64deff2aeb0d0cd43803fb467b35c26066aa23&quot;&#xd;
      },&#xd;
      &quot;tracesId&quot;: 10002945&#xd;
    },&#xd;
    &quot;importer&quot;: {&#xd;
      &quot;id&quot;: &quot;85c438e6-3686-4062-bf9d-e1d58164a68c&quot;,&#xd;
      &quot;type&quot;: &quot;consignee&quot;,&#xd;
      &quot;status&quot;: &quot;nonapproved&quot;,&#xd;
      &quot;companyName&quot;: &quot;34d858dcb0dcfa39d26fec243af9b70c00d114708a4ea7aef2c0a7ecf5c8da77&quot;,&#xd;
      &quot;address&quot;: {&#xd;
        &quot;addressLine1&quot;: &quot;fee87a8a5e72bb647983a993edd6a249576cf43fda2e1445404f466b6c559dd2&quot;,&#xd;
        &quot;addressLine2&quot;: &quot;6d587ffc47984a864d0bed1f60039a3380af906882126c882147e254d4d88ef5&quot;,&#xd;
        &quot;city&quot;: &quot;7dfaf1dacad4dc1299848bb874191cbfc58f3b89cf5fcdb886bc3d027a4cc196&quot;,&#xd;
        &quot;postalZipCode&quot;: &quot;f548e7c9df24c1d6b012d6877e2244a197e46d47ff0ee3b2cd6acf6a48b65716&quot;,&#xd;
        &quot;countryISOCode&quot;: &quot;4201fd485fee4ab1fd8d001c68d0aa0e6c5bb7fc81c5c4e088757c0060790b2e&quot;,&#xd;
        &quot;telephone&quot;: &quot;9f1eb7fa757784e10e9df982dc6a6bb14364ff936b40c15a9658e8feedbd51cd&quot;,&#xd;
        &quot;email&quot;: &quot;9b1f8ab97bccfba1d74cb42bee64deff2aeb0d0cd43803fb467b35c26066aa23&quot;&#xd;
      },&#xd;
      &quot;tracesId&quot;: 10002945&#xd;
    },&#xd;
    &quot;placeOfDestination&quot;: {&#xd;
      &quot;id&quot;: &quot;85c438e6-3686-4062-bf9d-e1d58164a68c&quot;,&#xd;
      &quot;type&quot;: &quot;consignee&quot;,&#xd;
      &quot;status&quot;: &quot;nonapproved&quot;,&#xd;
      &quot;companyName&quot;: &quot;34d858dcb0dcfa39d26fec243af9b70c00d114708a4ea7aef2c0a7ecf5c8da77&quot;,&#xd;
      &quot;address&quot;: {&#xd;
        &quot;addressLine1&quot;: &quot;fee87a8a5e72bb647983a993edd6a249576cf43fda2e1445404f466b6c559dd2&quot;,&#xd;
        &quot;addressLine2&quot;: &quot;6d587ffc47984a864d0bed1f60039a3380af906882126c882147e254d4d88ef5&quot;,&#xd;
        &quot;city&quot;: &quot;7dfaf1dacad4dc1299848bb874191cbfc58f3b89cf5fcdb886bc3d027a4cc196&quot;,&#xd;
        &quot;postalZipCode&quot;: &quot;f548e7c9df24c1d6b012d6877e2244a197e46d47ff0ee3b2cd6acf6a48b65716&quot;,&#xd;
        &quot;countryISOCode&quot;: &quot;4201fd485fee4ab1fd8d001c68d0aa0e6c5bb7fc81c5c4e088757c0060790b2e&quot;,&#xd;
        &quot;telephone&quot;: &quot;9f1eb7fa757784e10e9df982dc6a6bb14364ff936b40c15a9658e8feedbd51cd&quot;,&#xd;
        &quot;email&quot;: &quot;9b1f8ab97bccfba1d74cb42bee64deff2aeb0d0cd43803fb467b35c26066aa23&quot;&#xd;
      },&#xd;
      &quot;tracesId&quot;: 10002945&#xd;
    },&#xd;
    &quot;commodities&quot;: {&#xd;
      &quot;numberOfPackages&quot;: 10,&#xd;
      &quot;numberOfAnimals&quot;: 4233,&#xd;
      &quot;commodityComplement&quot;: [&#xd;
        {&#xd;
          &quot;commodityID&quot;: &quot;03011100&quot;,&#xd;
          &quot;commodityDescription&quot;: &quot;Freshwater fish&quot;,&#xd;
          &quot;complementID&quot;: 237020,&#xd;
          &quot;complementName&quot;: &quot;Other freshwater fish&quot;,&#xd;
          &quot;speciesID&quot;: &quot;300832&quot;,&#xd;
          &quot;speciesName&quot;: &quot;Other freshwater fish&quot;,&#xd;
          &quot;speciesType&quot;: &quot;2&quot;,&#xd;
          &quot;speciesClass&quot;: &quot;315137&quot;,&#xd;
          &quot;speciesNomination&quot;: &quot;Other freshwater fish&quot;,&#xd;
          &quot;isCdsMatched&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;commodityID&quot;: &quot;030760&quot;,&#xd;
          &quot;commodityDescription&quot;: &quot;Snails, other than sea snails&quot;,&#xd;
          &quot;complementID&quot;: 237024,&#xd;
          &quot;complementName&quot;: &quot;Gasteropoda&quot;,&#xd;
          &quot;speciesID&quot;: &quot;37579&quot;,&#xd;
          &quot;speciesName&quot;: &quot;Gasteropoda&quot;,&#xd;
          &quot;speciesTypeName&quot;: &quot;Aquarium&quot;,&#xd;
          &quot;speciesType&quot;: &quot;1&quot;,&#xd;
          &quot;speciesClass&quot;: &quot;37579&quot;,&#xd;
          &quot;speciesNomination&quot;: &quot;Gasteropoda&quot;,&#xd;
          &quot;isCdsMatched&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;commodityID&quot;: &quot;03079100&quot;,&#xd;
          &quot;commodityDescription&quot;: &quot;Live, fresh or chilled&quot;,&#xd;
          &quot;complementID&quot;: 237026,&#xd;
          &quot;complementName&quot;: &quot;Other Mollusca&quot;,&#xd;
          &quot;speciesID&quot;: &quot;332694&quot;,&#xd;
          &quot;speciesName&quot;: &quot;Other Mollusca&quot;,&#xd;
          &quot;speciesTypeName&quot;: &quot;Aquarium&quot;,&#xd;
          &quot;speciesType&quot;: &quot;1&quot;,&#xd;
          &quot;speciesClass&quot;: &quot;36704&quot;,&#xd;
          &quot;speciesNomination&quot;: &quot;Other Mollusca&quot;,&#xd;
          &quot;isCdsMatched&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;commodityID&quot;: &quot;03011900&quot;,&#xd;
          &quot;commodityDescription&quot;: &quot;Other than 0301 11 00&quot;,&#xd;
          &quot;complementID&quot;: 237027,&#xd;
          &quot;complementName&quot;: &quot;Acanthurus leucosternon&quot;,&#xd;
          &quot;speciesID&quot;: &quot;293770&quot;,&#xd;
          &quot;speciesName&quot;: &quot;Acanthurus leucosternon&quot;,&#xd;
          &quot;speciesType&quot;: &quot;2&quot;,&#xd;
          &quot;speciesClass&quot;: &quot;133301&quot;,&#xd;
          &quot;speciesNomination&quot;: &quot;Acanthurus leucosternon&quot;,&#xd;
          &quot;isCdsMatched&quot;: true&#xd;
        },&#xd;
        {&#xd;
          &quot;commodityID&quot;: &quot;03089010&quot;,&#xd;
          &quot;commodityDescription&quot;: &quot;Live, fresh or chilled&quot;,&#xd;
          &quot;complementID&quot;: 237028,&#xd;
          &quot;complementName&quot;: &quot;Actiniaria&quot;,&#xd;
          &quot;speciesID&quot;: &quot;160028&quot;,&#xd;
          &quot;speciesName&quot;: &quot;Actiniaria&quot;,&#xd;
          &quot;speciesTypeName&quot;: &quot;Aquarium&quot;,&#xd;
          &quot;speciesType&quot;: &quot;1&quot;,&#xd;
          &quot;speciesClass&quot;: &quot;133305&quot;,&#xd;
          &quot;speciesNomination&quot;: &quot;Actiniaria&quot;,&#xd;
          &quot;isCdsMatched&quot;: true&#xd;
        }&#xd;
      ],&#xd;
      &quot;complementParameterSet&quot;: [&#xd;
        {&#xd;
          &quot;uniqueComplementID&quot;: &quot;ee2ff620-5b1c-4215-bcfe-16667b03b24c&quot;,&#xd;
          &quot;complementID&quot;: 237020,&#xd;
          &quot;speciesID&quot;: &quot;300832&quot;,&#xd;
          &quot;keyDataPair&quot;: [&#xd;
            {&#xd;
              &quot;key&quot;: &quot;number_package&quot;,&#xd;
              &quot;data&quot;: &quot;6&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;number_animal&quot;,&#xd;
              &quot;data&quot;: &quot;4143&quot;&#xd;
            }&#xd;
          ]&#xd;
        },&#xd;
        {&#xd;
          &quot;uniqueComplementID&quot;: &quot;9547a2c8-8cf7-4f01-ac86-3d14f7800749&quot;,&#xd;
          &quot;complementID&quot;: 237024,&#xd;
          &quot;speciesID&quot;: &quot;37579&quot;,&#xd;
          &quot;keyDataPair&quot;: [&#xd;
            {&#xd;
              &quot;key&quot;: &quot;number_package&quot;,&#xd;
              &quot;data&quot;: &quot;1&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;number_animal&quot;,&#xd;
              &quot;data&quot;: &quot;50&quot;&#xd;
            }&#xd;
          ]&#xd;
        },&#xd;
        {&#xd;
          &quot;uniqueComplementID&quot;: &quot;09331178-6d2b-4f75-b37f-2fd81121e947&quot;,&#xd;
          &quot;complementID&quot;: 237026,&#xd;
          &quot;speciesID&quot;: &quot;332694&quot;,&#xd;
          &quot;keyDataPair&quot;: [&#xd;
            {&#xd;
              &quot;key&quot;: &quot;number_package&quot;,&#xd;
              &quot;data&quot;: &quot;1&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;number_animal&quot;,&#xd;
              &quot;data&quot;: &quot;10&quot;&#xd;
            }&#xd;
          ]&#xd;
        },&#xd;
        {&#xd;
          &quot;uniqueComplementID&quot;: &quot;b92786d2-c85a-466c-b2cb-000e20ae7f1b&quot;,&#xd;
          &quot;complementID&quot;: 237027,&#xd;
          &quot;speciesID&quot;: &quot;293770&quot;,&#xd;
          &quot;keyDataPair&quot;: [&#xd;
            {&#xd;
              &quot;key&quot;: &quot;number_package&quot;,&#xd;
              &quot;data&quot;: &quot;1&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;number_animal&quot;,&#xd;
              &quot;data&quot;: &quot;25&quot;&#xd;
            }&#xd;
          ]&#xd;
        },&#xd;
        {&#xd;
          &quot;uniqueComplementID&quot;: &quot;cf2f4291-3d12-41dd-8657-bb7cf1d669ee&quot;,&#xd;
          &quot;complementID&quot;: 237028,&#xd;
          &quot;speciesID&quot;: &quot;160028&quot;,&#xd;
          &quot;keyDataPair&quot;: [&#xd;
            {&#xd;
              &quot;key&quot;: &quot;number_package&quot;,&#xd;
              &quot;data&quot;: &quot;1&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;number_animal&quot;,&#xd;
              &quot;data&quot;: &quot;5&quot;&#xd;
            }&#xd;
          ]&#xd;
        }&#xd;
      ],&#xd;
      &quot;includeNonAblactedAnimals&quot;: false,&#xd;
      &quot;countryOfOrigin&quot;: &quot;LK&quot;,&#xd;
      &quot;animalsCertifiedAs&quot;: &quot;Pets&quot;&#xd;
    },&#xd;
    &quot;purpose&quot;: {&#xd;
      &quot;forImportOrAdmission&quot;: &quot;Definitive import&quot;,&#xd;
      &quot;purposeGroup&quot;: &quot;For Re-Import&quot;&#xd;
    },&#xd;
    &quot;pointOfEntry&quot;: &quot;GBMNC4&quot;,&#xd;
    &quot;arrivalDate&quot;: &quot;2024-12-04&quot;,&#xd;
    &quot;arrivalTime&quot;: &quot;06:05:00&quot;,&#xd;
    &quot;transporter&quot;: {&#xd;
      &quot;id&quot;: &quot;cf265f1e-c0b8-487a-92dd-608f9e7d5766&quot;,&#xd;
      &quot;type&quot;: &quot;commercial transporter&quot;,&#xd;
      &quot;status&quot;: &quot;approved&quot;,&#xd;
      &quot;companyName&quot;: &quot;70e287da66d7dfafec2c43443d87139b01902f983d104870066532de5c5541e0&quot;,&#xd;
      &quot;individualName&quot;: &quot;965e1fc96c692fa8a24f089ad1d733ad5da6ba8c6d6321abaf64cd8ec3abbec0&quot;,&#xd;
      &quot;approvalNumber&quot;: &quot;dddefd7c215a6bf0bda517d38938b17d203b90446fb67b6dd27e97896e00386c&quot;,&#xd;
      &quot;address&quot;: {&#xd;
        &quot;addressLine1&quot;: &quot;62e4effd1657661da941838c68bef45746805c7826648312466a1ae88833612c&quot;,&#xd;
        &quot;addressLine2&quot;: &quot;663682a2f937c7b12176a78a3cbe3c42a2e4d00e32e58453a10d81960d4cecef&quot;,&#xd;
        &quot;addressLine3&quot;: &quot;05cc788e548aafe1d69bbd9daa979e8d8e591b4a83b9c4ad0488aa02aa4de5eb&quot;,&#xd;
        &quot;city&quot;: &quot;f046c94873953061c966173cc22645ed3b49fa5af7cbafee42e4258590b82510&quot;,&#xd;
        &quot;postalZipCode&quot;: &quot;3ea54fe2b61490b10b0f4885a2c2f5b7b5038d912cdc5f716f3fc7241c27f72b&quot;,&#xd;
        &quot;countryISOCode&quot;: &quot;4201fd485fee4ab1fd8d001c68d0aa0e6c5bb7fc81c5c4e088757c0060790b2e&quot;&#xd;
      },&#xd;
      &quot;tracesId&quot;: 10393170&#xd;
    },&#xd;
    &quot;meansOfTransport&quot;: {&#xd;
      &quot;id&quot;: &quot;27e055d0a84efd377e14b42107bf877c4538154161ce703361513bb57cb0f0c7&quot;,&#xd;
      &quot;type&quot;: &quot;Road Vehicle&quot;,&#xd;
      &quot;document&quot;: &quot;97a96686266878ae37604d6130e89e04291f30abc20fc012ba632a1e9b1f7b0d&quot;&#xd;
    },&#xd;
    &quot;meansOfTransportFromEntryPoint&quot;: {&#xd;
      &quot;id&quot;: &quot;c0f572432da3e33692250ceb88a3a183cc011d1e30207b7136d70580bd28c08c&quot;,&#xd;
      &quot;type&quot;: &quot;Aeroplane&quot;,&#xd;
      &quot;document&quot;: &quot;0699f2aec6df2aa1e89471d14fa3b0fee6882090af64f07720be4e6ddc61411b&quot;&#xd;
    },&#xd;
    &quot;departureDate&quot;: &quot;2024-12-04&quot;,&#xd;
    &quot;departureTime&quot;: &quot;10:05:00&quot;,&#xd;
    &quot;estimatedJourneyTimeInMinutes&quot;: 5,&#xd;
    &quot;responsibleForTransport&quot;: &quot;Lincs Aquatics&quot;,&#xd;
    &quot;veterinaryInformation&quot;: {&#xd;
      &quot;accompanyingDocuments&quot;: [&#xd;
        {&#xd;
          &quot;documentType&quot;: &quot;latestVeterinaryHealthCertificate&quot;,&#xd;
          &quot;documentReference&quot;: &quot;DAPH/VRA/4/1/4/1-(2024)-1764&quot;,&#xd;
          &quot;documentIssueDate&quot;: &quot;2024-12-03&quot;,&#xd;
          &quot;attachmentId&quot;: &quot;dbb75b5c-48a0-4d7e-a7da-0e27c500617d&quot;,&#xd;
          &quot;attachmentFilename&quot;: &quot;Health Certificate and .pdf&quot;,&#xd;
          &quot;attachmentContentType&quot;: &quot;application/pdf&quot;,&#xd;
          &quot;uploadUserId&quot;: &quot;dfb0eb26-3947-e911-a95e-000d3a454f67&quot;,&#xd;
          &quot;uploadOrganisationId&quot;: &quot;33accdd3-3e46-e911-a956-000d3a454330&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;documentType&quot;: &quot;airWaybill&quot;,&#xd;
          &quot;documentReference&quot;: &quot;157-38881975&quot;,&#xd;
          &quot;documentIssueDate&quot;: &quot;2024-11-28&quot;,&#xd;
          &quot;attachmentId&quot;: &quot;8fb9ff36-29e2-44ac-ba8c-f9cacbb03786&quot;,&#xd;
          &quot;attachmentFilename&quot;: &quot;AWB.pdf&quot;,&#xd;
          &quot;attachmentContentType&quot;: &quot;application/pdf&quot;,&#xd;
          &quot;uploadUserId&quot;: &quot;dfb0eb26-3947-e911-a95e-000d3a454f67&quot;,&#xd;
          &quot;uploadOrganisationId&quot;: &quot;33accdd3-3e46-e911-a956-000d3a454330&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;identificationDetails&quot;: [&#xd;
        {}&#xd;
      ]&#xd;
    },&#xd;
    &quot;route&quot;: {},&#xd;
    &quot;submissionDate&quot;: &quot;2024-12-03T14:54:43.083764875Z&quot;,&#xd;
    &quot;submittedBy&quot;: {&#xd;
      &quot;displayName&quot;: &quot;d98e8c5c797ba62458fa57cf87bcf82f43abde97b76e1d0290da928b149a6c83&quot;,&#xd;
      &quot;userId&quot;: &quot;dfb0eb26-3947-e911-a95e-000d3a454f67&quot;&#xd;
    },&#xd;
    &quot;complexCommoditySelected&quot;: true&#xd;
  },&#xd;
  &quot;decisionBy&quot;: {&#xd;
    &quot;displayName&quot;: &quot;121b752eb2e43e1201ac433287387f83b604b4045ab489914d27b70d1eda7668&quot;,&#xd;
    &quot;userId&quot;: &quot;3dd58971-2d3f-e911-a95d-000d3a454f67&quot;&#xd;
  },&#xd;
  &quot;decisionDate&quot;: &quot;2024-12-04T11:03:22.103167096Z&quot;,&#xd;
  &quot;partTwo&quot;: {&#xd;
    &quot;decision&quot;: {&#xd;
      &quot;consignmentAcceptable&quot;: true,&#xd;
      &quot;decision&quot;: &quot;Acceptable for Internal Market&quot;&#xd;
    },&#xd;
    &quot;consignmentCheck&quot;: {&#xd;
      &quot;euStandard&quot;: &quot;Not Set&quot;,&#xd;
      &quot;documentCheckResult&quot;: &quot;Satisfactory&quot;,&#xd;
      &quot;nationalRequirements&quot;: &quot;Not Set&quot;,&#xd;
      &quot;additionalGuarantees&quot;: &quot;Not Set&quot;,&#xd;
      &quot;identityCheckResult&quot;: &quot;Satisfactory&quot;,&#xd;
      &quot;physicalCheckResult&quot;: &quot;Satisfactory&quot;,&#xd;
      &quot;welfareCheck&quot;: &quot;Satisfactory&quot;,&#xd;
      &quot;numberOfAnimalsChecked&quot;: 505&#xd;
    },&#xd;
    &quot;impactOfTransportOnAnimals&quot;: {&#xd;
      &quot;numberOfDeadAnimals&quot;: 2,&#xd;
      &quot;numberOfDeadAnimalsUnit&quot;: &quot;number&quot;,&#xd;
      &quot;numberOfUnfitAnimalsUnit&quot;: &quot;number&quot;&#xd;
    },&#xd;
    &quot;laboratoryTestsRequired&quot;: false,&#xd;
    &quot;resealedContainersIncluded&quot;: false,&#xd;
    &quot;controlAuthority&quot;: {&#xd;
      &quot;officialVeterinarian&quot;: {&#xd;
        &quot;firstName&quot;: &quot;551f01986d5c1a85381b920d37fb7563ec31720839babda2fa3b81b3bf2c3481&quot;,&#xd;
        &quot;lastName&quot;: &quot;63e37aad07e6e7d285cbe93f96933423ca4b43db800662f803e570ec88f5b9d8&quot;,&#xd;
        &quot;email&quot;: &quot;60391d5a51655a1fbe29db91367f49610c2259dbe3ef31eb623e85eb509d6c57&quot;,&#xd;
        &quot;phone&quot;: &quot;c7fd4c237bcc57481e87de7624a6549527e7cbfcefb6f959e8f4cfed9fb4b5a2&quot;,&#xd;
        &quot;signed&quot;: &quot;2024-12-04T11:03:22.1326946&quot;&#xd;
      }&#xd;
    },&#xd;
    &quot;bipLocalReferenceNumber&quot;: &quot;f3317e6cc2881afb813f8dfcb21ce18d084e3d5c506c322a887caf70bc123e41&quot;&#xd;
  },&#xd;
  &quot;etag&quot;: &quot;0000000004504BB3&quot;,&#xd;
  &quot;isCdsFullMatched&quot;: true,&#xd;
  &quot;chedTypeVersion&quot;: 1&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__groovy(props.get(&apos;ServiceBus__Notifications__Host&apos;))}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__groovy(props.get(&quot;ServiceBus__Notifications__Path&quot;))}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.proxyScheme">https</stringProp>
              <stringProp name="HTTPSampler.proxyHost">${__P(https.proxyHost,)}</stringProp>
              <stringProp name="HTTPSampler.proxyPort">${__P(https.proxyPort,)}</stringProp>
              <stringProp name="HTTPSampler.proxyUser">${__P(https.proxyUser,)}</stringProp>
              <stringProp name="HTTPSampler.proxyPass">${__P(https.proxyPassword,)}</stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Use Proxy" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">def proxyHost = System.getProperty(&quot;https.proxyHost&quot;)
def proxyPort = System.getProperty(&quot;https.proxyPort&quot;)
def proxyUser = System.getProperty(&quot;https.proxyUser&quot;)
def proxyPass = System.getProperty(&quot;https.proxyPassword&quot;)
def proxyScheme = &quot;https&quot;

import org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase

if (sampler instanceof HTTPSamplerBase) {
    sampler.setDomain(proxyHost)
    sampler.setPort(proxyPort)
    sampler.setProtocol(proxyScheme)

    if (proxyUser &amp;&amp; proxyPass) {
        sampler.setProperty(&quot;HTTPSampler.proxyUser&quot;, proxyUser)
        sampler.setProperty(&quot;HTTPSampler.proxyPass&quot;, proxyPass)
    }

    log.info(&quot;Applied proxy config to sampler: ${proxyHost}:${proxyPort} (${proxyScheme})&quot;)
}
</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate random Notification data" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">def suffix = String.format(&quot;%07d&quot;, new Random().nextInt(1_000_000))

def ref = &quot;CHEDA.XX.2025.${suffix}&quot;
log.info(&apos;CHED: &apos; + ref)
vars.put(&quot;referenceNumber&quot;, ref)</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${__groovy(props.get(&quot;ServiceBus__Notifications__AuthToken&quot;))}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Update Sample Label" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">prev.setSampleLabel(&apos;Send Notification: &apos; + vars.get(&apos;referenceNumber&apos;))</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01.04. Send GMR" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;GmrId&quot;: &quot;${id}&quot;,&#xd;
  &quot;HaulierEori&quot;: &quot;GB5380138094988&quot;,&#xd;
  &quot;State&quot;: &quot;CHECKED_IN&quot;,&#xd;
  &quot;InspectionRequired&quot;: null,&#xd;
  &quot;ReportToLocations&quot;: null,&#xd;
  &quot;UpdatedDateTime&quot;: &quot;2025-06-04T15:00:00.425Z&quot;,&#xd;
  &quot;Direction&quot;: &quot;UK_INBOUND&quot;,&#xd;
  &quot;HaulierType&quot;: &quot;RMG&quot;,&#xd;
  &quot;IsUnaccompanied&quot;: true,&#xd;
  &quot;VehicleRegNum&quot;: &quot;WICXEB&quot;,&#xd;
  &quot;TrailerRegistrationNums&quot;: [&#xd;
    &quot;IIWSI1&quot;,&#xd;
    &quot;YRSVQM&quot;&#xd;
  ],&#xd;
  &quot;ContainerReferenceNums&quot;: null,&#xd;
  &quot;PlannedCrossing&quot;: {&#xd;
    &quot;RouteId&quot;: &quot;19&quot;,&#xd;
    &quot;LocalDateTimeOfDeparture&quot;: &quot;2025-02-13T14:25&quot;&#xd;
  },&#xd;
  &quot;CheckedInCrossing&quot;: {&#xd;
    &quot;RouteId&quot;: &quot;19&quot;,&#xd;
    &quot;LocalDateTimeOfArrival&quot;: &quot;2025-02-13T14:25&quot;&#xd;
  },&#xd;
  &quot;ActualCrossing&quot;: null,&#xd;
  &quot;Declarations&quot;: {&#xd;
    &quot;Transits&quot;: null,&#xd;
    &quot;Customs&quot;: [&#xd;
      {&#xd;
        &quot;Id&quot;: &quot;${mrn}}&quot;&#xd;
      }&#xd;
    ]&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__groovy(props.get(&apos;ServiceBus__Gmrs__Host&apos;))}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__groovy(props.get(&apos;ServiceBus__Gmrs__Path&apos;))}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.proxyScheme">https</stringProp>
              <stringProp name="HTTPSampler.proxyHost">${__P(https.proxyHost,)}</stringProp>
              <stringProp name="HTTPSampler.proxyPort">${__P(https.proxyPort,)}</stringProp>
              <stringProp name="HTTPSampler.proxyUser">${__P(https.proxyUser,)}</stringProp>
              <stringProp name="HTTPSampler.proxyPass">${__P(https.proxyPassword,)}</stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Use Proxy" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">def proxyHost = System.getProperty(&quot;https.proxyHost&quot;)
def proxyPort = System.getProperty(&quot;https.proxyPort&quot;)
def proxyUser = System.getProperty(&quot;https.proxyUser&quot;)
def proxyPass = System.getProperty(&quot;https.proxyPassword&quot;)
def proxyScheme = &quot;https&quot;

import org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase

if (sampler instanceof HTTPSamplerBase) {
    sampler.setDomain(proxyHost)
    sampler.setPort(proxyPort)
    sampler.setProtocol(proxyScheme)

    if (proxyUser &amp;&amp; proxyPass) {
        sampler.setProperty(&quot;HTTPSampler.proxyUser&quot;, proxyUser)
        sampler.setProperty(&quot;HTTPSampler.proxyPass&quot;, proxyPass)
    }

    log.info(&quot;Applied proxy config to sampler: ${proxyHost}:${proxyPort} (${proxyScheme})&quot;)
}
</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate random GMR data" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">def chars = (&apos;A&apos;..&apos;Z&apos;)  + (&apos;0&apos;..&apos;9&apos;)
def suffix = (1..10).collect { chars[new Random().nextInt(chars.size())] }.join()

def id = &quot;GMR${suffix}&quot;

//log.info(&quot;GMR id: &quot; + id)
vars.put(&quot;id&quot;, id)</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">${__groovy(props.get(&quot;ServiceBus__Gmrs__AuthToken&quot;))}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Update Sample Label" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">prev.setSampleLabel(&apos;Send GMR: &apos; + vars.get(&apos;id&apos;))</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01.05. Send ALVS Decision" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;NS1:Envelope xmlns:NS1=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;&#xd;
  &lt;NS1:Header&gt;&#xd;
    &lt;NS2:Security xmlns:NS2=&quot;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd&quot; NS1:role=&quot;system&quot;&gt;&#xd;
      &lt;NS2:UsernameToken&gt;&#xd;
        &lt;NS2:Username&gt;ibmtest&lt;/NS2:Username&gt;&#xd;
        &lt;NS2:Password&gt;password&lt;/NS2:Password&gt;&#xd;
      &lt;/NS2:UsernameToken&gt;&#xd;
    &lt;/NS2:Security&gt;&#xd;
  &lt;/NS1:Header&gt;&#xd;
  &lt;NS1:Body&gt;&#xd;
    &lt;NS3:DecisionNotification xmlns:NS3=&quot;http://uk.gov.hmrc.ITSW2.ws&quot;&gt;&#xd;
      &lt;NS2:DecisionNotification xmlns:NS2=&quot;http://www.hmrc.gov.uk/webservices/itsw/ws/decisionnotification&quot;&gt;&#xd;
        &lt;NS2:ServiceHeader&gt;&#xd;
          &lt;NS2:SourceSystem&gt;ALVS&lt;/NS2:SourceSystem&gt;&#xd;
          &lt;NS2:DestinationSystem&gt;CDS&lt;/NS2:DestinationSystem&gt;&#xd;
          &lt;NS2:CorrelationId&gt;238708176057&lt;/NS2:CorrelationId&gt;&#xd;
          &lt;NS2:ServiceCallTimestamp&gt;2025-06-12T23:28:42.217&lt;/NS2:ServiceCallTimestamp&gt;&#xd;
        &lt;/NS2:ServiceHeader&gt;&#xd;
        &lt;NS2:Header&gt;&#xd;
          &lt;NS2:EntryReference&gt;${mrn}&lt;/NS2:EntryReference&gt;&#xd;
          &lt;NS2:EntryVersionNumber&gt;1&lt;/NS2:EntryVersionNumber&gt;&#xd;
          &lt;NS2:DecisionNumber&gt;1&lt;/NS2:DecisionNumber&gt;&#xd;
        &lt;/NS2:Header&gt;&#xd;
        &lt;NS2:Item&gt;&#xd;
          &lt;NS2:ItemNumber&gt;1&lt;/NS2:ItemNumber&gt;&#xd;
          &lt;NS2:Check&gt;&#xd;
            &lt;NS2:CheckCode&gt;H221&lt;/NS2:CheckCode&gt;&#xd;
            &lt;NS2:DecisionCode&gt;C03&lt;/NS2:DecisionCode&gt;&#xd;
          &lt;/NS2:Check&gt;&#xd;
        &lt;/NS2:Item&gt;&#xd;
        &lt;NS2:Item&gt;&#xd;
          &lt;NS2:ItemNumber&gt;2&lt;/NS2:ItemNumber&gt;&#xd;
          &lt;NS2:Check&gt;&#xd;
            &lt;NS2:CheckCode&gt;H221&lt;/NS2:CheckCode&gt;&#xd;
            &lt;NS2:DecisionCode&gt;C03&lt;/NS2:DecisionCode&gt;&#xd;
          &lt;/NS2:Check&gt;&#xd;
        &lt;/NS2:Item&gt;&#xd;
        &lt;NS2:Item&gt;&#xd;
          &lt;NS2:ItemNumber&gt;3&lt;/NS2:ItemNumber&gt;&#xd;
          &lt;NS2:Check&gt;&#xd;
            &lt;NS2:CheckCode&gt;H221&lt;/NS2:CheckCode&gt;&#xd;
            &lt;NS2:DecisionCode&gt;C03&lt;/NS2:DecisionCode&gt;&#xd;
          &lt;/NS2:Check&gt;&#xd;
        &lt;/NS2:Item&gt;&#xd;
        &lt;NS2:Item&gt;&#xd;
          &lt;NS2:ItemNumber&gt;4&lt;/NS2:ItemNumber&gt;&#xd;
          &lt;NS2:Check&gt;&#xd;
            &lt;NS2:CheckCode&gt;H221&lt;/NS2:CheckCode&gt;&#xd;
            &lt;NS2:DecisionCode&gt;C03&lt;/NS2:DecisionCode&gt;&#xd;
          &lt;/NS2:Check&gt;&#xd;
        &lt;/NS2:Item&gt;&#xd;
        &lt;NS2:Item&gt;&#xd;
          &lt;NS2:ItemNumber&gt;5&lt;/NS2:ItemNumber&gt;&#xd;
          &lt;NS2:Check&gt;&#xd;
            &lt;NS2:CheckCode&gt;H221&lt;/NS2:CheckCode&gt;&#xd;
            &lt;NS2:DecisionCode&gt;C03&lt;/NS2:DecisionCode&gt;&#xd;
          &lt;/NS2:Check&gt;&#xd;
        &lt;/NS2:Item&gt;&#xd;
      &lt;/NS2:DecisionNotification&gt;&#xd;
    &lt;/NS3:DecisionNotification&gt;&#xd;
  &lt;/NS1:Body&gt;&#xd;
&lt;/NS1:Envelope&gt;&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__groovy(props.get(&apos;BtmsGateway__Host&apos;))}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/ws/CDS/defra/alvsclearanceinbound/v1</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01.06. Send Finalisation" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#xd;
&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&#xd;
    xmlns:oas=&quot;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd&quot;&gt;&#xd;
    &lt;soap:Header&gt;&#xd;
        &lt;oas:Security soap:role=&quot;system&quot; soap:mustUnderstand=&quot;true&quot;&gt;&#xd;
            &lt;oas:UsernameToken&gt;&#xd;
                &lt;oas:Username&gt;systemID&amp;#x3D;ALVSHMRCCDS,ou&amp;#x3D;gsi systems,o&amp;#x3D;cds&lt;/oas:Username&gt;&#xd;
                &lt;oas:Password Type=&quot;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText&quot;&gt;password&lt;/oas:Password&gt;&#xd;
            &lt;/oas:UsernameToken&gt;&#xd;
        &lt;/oas:Security&gt;&#xd;
    &lt;/soap:Header&gt;&#xd;
    &lt;soap:Body&gt;&#xd;
        &lt;FinalisationNotificationRequest&#xd;
            xmlns=&quot;http://notifyfinalisedstatehmrcfacade.types.esb.ws.cara.defra.com&quot;&gt;&#xd;
            &lt;ServiceHeader&gt;&#xd;
                &lt;SourceSystem&gt;CDS&lt;/SourceSystem&gt;&#xd;
                &lt;DestinationSystem&gt;ALVS&lt;/DestinationSystem&gt;&#xd;
                &lt;CorrelationId&gt;${__Random(100000000000,999999999999)}&lt;/CorrelationId&gt;&#xd;
                &lt;ServiceCallTimestamp&gt;${__time(yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSS&apos;Z&apos;)}&lt;/ServiceCallTimestamp&gt;&#xd;
            &lt;/ServiceHeader&gt;&#xd;
            &lt;Header&gt;&#xd;
                &lt;EntryReference&gt;${mrn}&lt;/EntryReference&gt;&#xd;
                &lt;EntryVersionNumber&gt;1&lt;/EntryVersionNumber&gt;&#xd;
                &lt;DecisionNumber&gt;1&lt;/DecisionNumber&gt;&#xd;
                &lt;FinalState&gt;0&lt;/FinalState&gt;&#xd;
                &lt;ManualAction&gt;N&lt;/ManualAction&gt;&#xd;
            &lt;/Header&gt;&#xd;
        &lt;/FinalisationNotificationRequest&gt;&#xd;
    &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__groovy(props.get(&apos;BtmsGateway__Host&apos;))}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/ITSW/CDS/NotifyFinalisedStateCDSFacadeService</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Ignore ASB connection failures" enabled="true">
              <stringProp name="TestPlan.comments">If we get failure sending to the ASB, we need can ignore this, it&apos;s not the SUT that is at fault. But we also need to stop the current thread iteration.</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.jmeter.threads.JMeterContext.TestLogicalAction

if (!prev.isSuccessful()) {
    String code    = prev.getResponseCode()
    String message = prev.getResponseMessage()

    if (code.contains(&apos;NoHttpResponseException&apos;)) {
        log.warn(&quot;Ignoring NoHttpResponseException on &apos;${prev.getSampleLabel()}&apos;: ${message}&quot;)
        prev.setIgnore()
        ctx.setTestLogicalAction(TestLogicalAction.START_NEXT_ITERATION_OF_THREAD)
    }
}</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Save ids to file" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def outFile = new File(&apos;idsCreated.csv&apos;)
outFile &lt;&lt; &quot;${vars.get(&apos;mrn&apos;)},${vars.get(&apos;referenceNumber&apos;)},${vars.get(&apos;ducr&apos;)}\n&quot;</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="02.00 Verify" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Init Loop" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;pollStart&quot;, String.valueOf(System.currentTimeMillis()))
vars.put(&quot;maxWait&quot;, &quot;20000&quot;) 
vars.put(&quot;pollSuccess&quot;, &quot;false&quot;)
vars.put(&quot;pollMatchValue&quot;, &quot;none&quot;)
vars.put(&quot;pollError&quot;, &quot;false&quot;)
vars.put(&quot;pollInterval&quot;, &quot;3000&quot;)  
SampleResult.setIgnore()</stringProp>
            </JSR223Sampler>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Wait before verification" enabled="true">
                <stringProp name="ConstantTimer.delay">10000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
              <stringProp name="WhileController.condition">${__groovy(
    def start = vars.get(&quot;pollStart&quot;) as long
    def maxWait = vars.get(&quot;maxWait&quot;) as long
    def now = System.currentTimeMillis()
    def success = vars.get(&quot;pollSuccess&quot;) == &apos;true&apos;
    return (!success &amp;&amp; (now - start &lt; maxWait))
)}</stringProp>
            </WhileController>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Poll wait" enabled="true">
                <stringProp name="ConstantTimer.delay">2000</stringProp>
              </ConstantTimer>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02.01. Check Comparison" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__groovy(props.get(&apos;TradeImportsDecisionComparer__Host&apos;))}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/comparisons/${mrn}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Basic ${__groovy(props.get(&apos;TradeImportsDecisionComparer__AuthToken&apos;))}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Update Sample Label" enabled="false">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">prev.setSampleLabel(&apos;Check Comparison: &apos; + vars.get(&apos;mrn&apos;))</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Check Match" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.JsonSlurper

try {
    def responseCode = prev.getResponseCode()
    def body = prev.getResponseDataAsString()

    if (responseCode == &quot;200&quot;) {
        def json = new JsonSlurper().parseText(body)
        def match = json?.latest?.match

        if (match != null) {
            vars.put(&quot;pollMatchValue&quot;, match)
            if (match == &quot;ExactMatch&quot;) {
                vars.put(&quot;pollSuccess&quot;, &quot;true&quot;)
            }
        } else {
            log.info(&quot;Match field not found in response.&quot;)
        }
    } else {
        log.warn(&quot;Non-200 response: ${responseCode}&quot;)
        vars.put(&quot;pollError&quot;, &quot;true&quot;)
    }
} catch (Exception e) {
    log.error(&quot;Polling exception: &quot; + e.message)
    vars.put(&quot;pollError&quot;, &quot;true&quot;)
}</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="02.02. Check Result" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def success = vars.get(&quot;pollSuccess&quot;) == &quot;true&quot;
def error = vars.get(&quot;pollError&quot;) == &quot;true&quot;
def match = vars.get(&quot;pollMatchValue&quot;)
def mrn = vars.get(&quot;mrn&quot;)

if (success) {
    SampleResult.setSuccessful(true)
    SampleResult.setResponseMessage(&quot;Polling succeeded: match = ExactMatch, mrn: ${mrn}&quot;)
} else if (error) {
    SampleResult.setSuccessful(false)
    SampleResult.setResponseCode(&quot;500&quot;)
    SampleResult.setResponseMessage(&quot;Polling failed due to HTTP error or exception. mrn: ${mrn}&quot;)
} else if (match != &quot;none&quot;) {
    SampleResult.setSuccessful(false)
    SampleResult.setResponseCode(&quot;400&quot;)
    SampleResult.setResponseMessage(&quot;Polling completed but match = ${match} (not ExactMatch), mrn: ${mrn}&quot;)
} else {
    SampleResult.setSuccessful(false)
    SampleResult.setResponseCode(&quot;400&quot;)
    SampleResult.setResponseMessage(&quot;Polling timed out: no match field received, mrn: ${mrn}&quot;)
}</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Poll for comparison" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import groovy.json.JsonSlurper
import org.apache.jmeter.protocol.http.sampler.HTTPSamplerProxy
import org.apache.jmeter.protocol.http.control.HeaderManager
import org.apache.jmeter.protocol.http.control.Header

long maxWait = vars.get(&apos;maxWait&apos;) as long
long interval = vars.get(&apos;pollInterval&apos;) as long
String host = props.get(&apos;TradeImportsDecisionComparer__Host&apos;)
String token = props.get(&apos;TradeImportsDecisionComparer__AuthToken&apos;)
String mrn = vars.get(&apos;mrn&apos;)

def jsonParser = new JsonSlurper()
def pollSampler = new HTTPSamplerProxy()
pollSampler.setDomain(host)
pollSampler.setProtocol(&apos;https&apos;)
pollSampler.setPort(443)
pollSampler.setMethod(&apos;GET&apos;)
pollSampler.setPath(&quot;/comparisons/${mrn}&quot;)
pollSampler.setFollowRedirects(true)
pollSampler.setUseKeepAlive(true)

def hm = new HeaderManager()
hm.add(new Header(&apos;Authorization&apos;, &quot;Basic ${token}&quot;))
hm.add(new Header(&apos;Accept&apos;, &apos;application/json&apos;))
pollSampler.setHeaderManager(hm)

long startTime = System.currentTimeMillis()
boolean matched = false
String lastStatus = &apos;&apos;
String lastMatch = &apos;&apos;

while (!matched &amp;&amp; System.currentTimeMillis() - startTime &lt; maxWait) {
    def res = pollSampler.sample()
    lastStatus = res.getResponseCode()
    if (lastStatus == &apos;200&apos;) {
        def body = res.getResponseDataAsString()
        def obj = jsonParser.parseText(body)
        lastMatch = obj?.latest?.match?.toString()
        vars.put(&apos;pollMatchValue&apos;, lastMatch ?: &apos;&apos;)
        if (lastMatch == &apos;ExactMatch&apos;) {
            matched = true
            vars.put(&apos;pollSuccess&apos;, &apos;true&apos;)
            break
        }
    }
    Thread.sleep(interval)
}

if (!matched) {
    vars.put(&apos;pollSuccess&apos;, &apos;false&apos;)
}

SampleResult.setResponseCode(matched ? &apos;200&apos; : &apos;500&apos;)
SampleResult.setResponseData(&quot;pollSuccess=${vars.get(&apos;pollSuccess&apos;)}; lastMatch=${lastMatch}&quot;, &apos;UTF-8&apos;)
SampleResult.setSuccessful(matched)
</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <OpenModelThreadGroup guiclass="OpenModelThreadGroupGui" testclass="OpenModelThreadGroup" testname="CDS Errors" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="OpenModelThreadGroupController"/>
        <stringProp name="OpenModelThreadGroup.schedule"></stringProp>
        <stringProp name="OpenModelThreadGroup.random_seed"></stringProp>
      </OpenModelThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <OpenModelThreadGroup guiclass="OpenModelThreadGroupGui" testclass="OpenModelThreadGroup" testname="ALVS Errors" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="OpenModelThreadGroupController"/>
        <stringProp name="OpenModelThreadGroup.schedule"></stringProp>
        <stringProp name="OpenModelThreadGroup.random_seed"></stringProp>
      </OpenModelThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__groovy(props.get(&apos;BtmsGateway__Host&apos;))}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/ws/CDS/defra/alvsclearanceinbound/v1</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <OpenModelThreadGroup guiclass="OpenModelThreadGroupGui" testclass="OpenModelThreadGroup" testname="PHA API" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="OpenModelThreadGroupController"/>
        <stringProp name="OpenModelThreadGroup.schedule"></stringProp>
        <stringProp name="OpenModelThreadGroup.random_seed"></stringProp>
      </OpenModelThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="UI" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">300</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1200</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">3600</stringProp>
        <stringProp name="ThreadGroup.delay">180</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Initialise" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Get Random Search Values" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def dataFile = new File(&apos;idsCreated.csv&apos;)

if (!dataFile.exists() || dataFile.length()==0) {
    log.warn(&quot;idsCreated.csv not yet initialized&quot;)
} else {
    def lines = dataFile.readLines()
    def rndLine = lines[new Random().nextInt(lines.size())]
    def parts = rndLine.split(&apos;,&apos;)
    
    vars.put(&apos;mrn&apos;,  parts[0])
    vars.put(&apos;ched&apos;, parts[1])
    vars.put(&apos;ducr&apos;, parts[2])
}</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HomePage" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">btms-portal-frontend.perf-test.cdp-int.defra.cloud</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sign-in" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">btms-portal-frontend.perf-test.cdp-int.defra.cloud</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/sign-in</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Login Link" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">loginLink</stringProp>
              <stringProp name="RegexExtractor.regex">href=&quot;(\/cdp-defra-id-stub\/authorize\?[^&quot;]*user=chris\.johnson@example\.com[^&quot;]*)&quot; </stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="Get Login Path" enabled="true">
              <stringProp name="HtmlExtractor.refname">loginLink</stringProp>
              <stringProp name="HtmlExtractor.expr">a[href*=&quot;user=chris.johnson@example.com&quot;]</stringProp>
              <stringProp name="HtmlExtractor.attribute">href</stringProp>
              <stringProp name="HtmlExtractor.default"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
              <stringProp name="HtmlExtractor.match_number">1</stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
            </HtmlExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Select Identity" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">cdp-defra-id-stub.perf-test.cdp-int.defra.cloud</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__groovy(vars.get(&apos;loginLink&apos;))}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search Page" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">btms-portal-frontend.perf-test.cdp-int.defra.cloud</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/search</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-XSRF-TOKEN</stringProp>
                  <stringProp name="Header.value">${__cookie(XSRF-TOKEN)}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Do searches" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">10</stringProp>
        </LoopController>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Think Time" enabled="true">
            <stringProp name="ConstantTimer.delay">60000</stringProp>
          </ConstantTimer>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search for Ducr" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">btms-portal-frontend.perf-test.cdp-int.defra.cloud</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">search-result?searchTerm=${ducr} </stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1206406850">${ched}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search for MRN" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">btms-portal-frontend.perf-test.cdp-int.defra.cloud</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">search-result?searchTerm=${mrn} </stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1206406850">${ched}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search for CHED" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">btms-portal-frontend.perf-test.cdp-int.defra.cloud</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">search-result?searchTerm=${ched} </stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1147602827">${mrn}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search for MRN - Doesn&apos;t Exist" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">btms-portal-frontend.perf-test.cdp-int.defra.cloud</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">search-result?searchTerm=${notAnMrn} </stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate Random MRN" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def randomAlphanum(int len) {
    def chars = (&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)
    (1..len).collect { chars[new Random().nextInt(chars.size())] }.join()
}
def notAnMrn = &quot;21GB&quot; + randomAlphanum(14)
vars.put(&quot;notAnMrn&quot;, notAnMrn )</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1739685751">This MRN, CHED or DUCR reference cannot be found</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="false">
          <stringProp name="WhileController.condition">${__groovy(
  org.apache.jmeter.threads.JMeterContextService
    .getThreadCounts()
    .get(&apos;CDS/ALVS&apos;)
    .getActiveThreadCount() &gt; 0
)}</stringProp>
        </WhileController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Authorise" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="serviceId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">d7d72b79-9c62-ee11-8df0-000d3adf7047</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">serviceId</stringProp>
                </elementProp>
                <elementProp name="client_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">2fb0d715-affa-4bf1-836e-44a464e3fbea</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">client_id</stringProp>
                </elementProp>
                <elementProp name="response_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">code</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">response_type</stringProp>
                </elementProp>
                <elementProp name="redirect_uri" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">https://btms-portal-frontend.perf-test.cdp-int.defra.cloud/signin-oidc</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">redirect_uri</stringProp>
                </elementProp>
                <elementProp name="state" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">${state}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">state</stringProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">openid%20offline_access</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                </elementProp>
                <elementProp name="code_challenge" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">${code_challenge}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">code_challenge</stringProp>
                </elementProp>
                <elementProp name="code_challenge_method" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">S256</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">code_challenge_method</stringProp>
                </elementProp>
                <elementProp name="user" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">chris.johnson@example.com</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">user</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">cdp-defra-id-stub.perf-test.cdp-int.defra.cloud</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">cdp-defra-id-stub/authorize</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.security.MessageDigest
import java.util.Base64
import java.util.UUID

byte[] randomBytes = new byte[32]
new java.security.SecureRandom().nextBytes(randomBytes)
String codeVerifier = Base64.getUrlEncoder()
                           .withoutPadding()
                           .encodeToString(randomBytes)
vars.put(&apos;code_verifier&apos;, codeVerifier)

MessageDigest md = MessageDigest.getInstance(&quot;SHA-256&quot;)
byte[] digest = md.digest(codeVerifier.getBytes(&apos;US-ASCII&apos;))
String codeChallenge = Base64.getUrlEncoder()
                             .withoutPadding()
                             .encodeToString(digest)
vars.put(&apos;code_challenge&apos;, codeChallenge)


// generate a fresh random state on every iteration
String state = UUID.randomUUID().toString()
vars.put(&apos;state&apos;, state)
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">redirectUrl</stringProp>
              <stringProp name="RegexExtractor.regex">Location:\s*(https?://[^\s]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Authorisation Code" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">code</stringProp>
              <stringProp name="RegexExtractor.regex">(?i)Location:.*?[?&amp;]code=(\d+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">log.info(&quot;Extracted code → &apos;&quot; + vars.get(&apos;code&apos;) + &quot;&apos;&quot;);</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Callback" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="code" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">${code}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">code</stringProp>
                </elementProp>
                <elementProp name="state" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.value">${state}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">state</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">btms-portal-frontend.perf-test.cdp-int.defra.cloud</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/signin-oidc</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="RegexExtractor.refname">refreshPath</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;meta\s+http-equiv=&quot;refresh&quot;\s+content=&quot;0;URL=&apos;https?://[^/]+(/signin-oidc\?[^&apos;]+)&apos;&quot;&gt; </stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.net.URL

// 1) Pull the full URL out of the HTML response
String html = prev.getResponseDataAsString()
def m = (html =~ /URL=&apos;([^&apos;]+)&apos;/)
if (!m.find()) {
    log.error(&quot;Could not find meta-refresh URL in Login2 response&quot;)
    vars.put(&apos;refreshPath&apos;,&apos;&apos;)
} else {
    String fullUrl = m.group(1) 
    log.info(&quot;Found full meta-refresh URL → &quot; + fullUrl)
    
    // 2) Turn that into a path+query for JMeter
    URL u = new URL(fullUrl)
    String pathAndQuery = u.path + (u.query ? &apos;?&apos;+u.query : &apos;&apos;)
    vars.put(&apos;refreshPath&apos;, pathAndQuery)
    log.info(&quot;Extracted refreshPath = &quot; + pathAndQuery)
}</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Callback" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Token" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">grant_type=authorization_code&#xd;
&amp;code=${code}&#xd;
&amp;redirect_uri=https://btms-portal-frontend.perf-test.cdp-int.defra.cloud/signin-oidc&#xd;
&amp;client_id=2fb0d715-affa-4bf1-836e-44a464e3fbea&#xd;
&amp;code_verifier=${code_verifier}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">cdp-defra-id-stub.perf-test.cdp-int.defra.cloud</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/cdp-defra-id-stub/token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
            <boolProp name="displayJMeterProperties">true</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">true</boolProp>
          </DebugSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Meta Refresh" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">btms-portal-frontend.perf-test.cdp-int.defra.cloud</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${refreshPath}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.jmeter.protocol.http.control.CookieManager

// grab the Cookie Manager (the first one in scope)
CookieManager cm = ctx.getCurrentSampler().getCookieManager()

if (cm == null) {
    log.warn(&quot;No CookieManager found in this scope!&quot;)
} else {
    log.info(&quot;–––––––––– COOKIE DUMP ––––––––––&quot;)
    cm.getCookies().each { c -&gt;
        log.info(&quot;  domain=${c.domain} path=${c.path} name=${c.name} value=${c.value}&quot;)
    }
    log.info(&quot;––––––––––––––––––––––––––––––––&quot;)
}</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Watcher" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Force Stop After Timeout" enabled="true">
          <stringProp name="TestPlan.comments">90 Mins Max</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.jmeter.engine.JMeterEngine
import org.apache.jmeter.threads.JMeterContextService

SampleResult.setIgnore()

long maxWait   = 90 * 60 * 1000L
long waited    = 0L
long interval  = 2 * 1000L

List&lt;String&gt; threadGroupsToWatch = [&apos;CDS/ALVS&apos;,&apos;UI&apos;]

while (waited &lt; maxWait) {
    int active = JMeterContextService.getNumberOfThreads()
    if (active &lt;= 1) {
        return
    }
    Thread.sleep(interval)
    waited += interval
    log.info(&quot;waited:&quot; + waited)
}
log.info(&quot;Ending&quot;)
JMeterEngine engine = JMeterContextService.getContext().getEngine()
engine.stopTest(true)
ctx.getEngine().stopTestNow()
</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>true</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
