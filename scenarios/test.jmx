<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="btms-gateway-perf-tests Performance Tests">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
    </TestPlan>
    <hashTree>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="Setup">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </SetupThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Initialise Environment Variables as Props" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">def env = System.getenv(&quot;ENV&quot;) ?: &quot;NODEFAULT&quot;

def expectedVars = [
    &quot;BtmsGateway__Host&quot; : &quot;btms-gateway.${env}.cdp-int.defra.cloud&quot;,
    &quot;BtmsGateway__Protocol&quot; : &quot;https&quot;,
    &quot;BtmsPortalFrontend__Host&quot; : &quot;btms-portal-frontend.${env}.cdp-int.defra.cloud&quot;,
    &quot;BtmsPortalFrontend__Protocol&quot; : &quot;https&quot;,
    &quot;TradeImportsDataApi__Host&quot;: &quot;trade-imports-data-api.${env}.cdp-int.defra.cloud&quot;,
    &quot;TradeImportsDataApi__Protocol&quot;: &quot;https&quot;,
    &quot;TradeImportsDecisionComparer__Host&quot;: &quot;trade-imports-decision-comparer.${env}.cdp-int.defra.cloud&quot;,
    &quot;TradeImportsDecisionComparer__Protocol&quot;: &quot;https&quot;,
    &quot;ServiceBus__Notifications__ConnectionString&quot;: &quot;NODEFAULT&quot;,  
    &quot;ServiceBus__Notifications__Protocol&quot;: &quot;https&quot;,
    &quot;ServiceBus__Gmrs__ConnectionString&quot;: &quot;NODEFAULT&quot;,  
    &quot;ServiceBus__Gmrs__Protocol&quot;: &quot;https&quot;
]

expectedVars.each { key, defaultValue -&gt;
    def value = System.getenv(key) ?: defaultValue
    props.put(key, value)
    log.info(&quot;Set JMeter prop: ${key} = ${value}&quot;)
}</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <OpenModelThreadGroup guiclass="OpenModelThreadGroupGui" testclass="OpenModelThreadGroup" testname="CDS/ALVS - Basic Scenario" enabled="true">
        <stringProp name="OpenModelThreadGroup.schedule">rate(10/min) even_arrivals(1 min)</stringProp>
        <stringProp name="OpenModelThreadGroup.random_seed"> </stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="OpenModelThreadGroupController"/>
      </OpenModelThreadGroup>
      <hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Initialise vars"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Get Props" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="asb_connectionString" elementType="Argument">
                <stringProp name="Argument.name">asb_connectionString</stringProp>
                <stringProp name="Argument.value">${__groovy(props.get(&quot;ServiceBus__Gmrs__ConnectionStringl&quot;))}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ServiceBusProtocol" elementType="Argument">
                <stringProp name="Argument.name">ServiceBusProtocol</stringProp>
                <stringProp name="Argument.value">${__groovy(props.get(&quot;ServiceBus__Gmrs__Protocol&quot;))}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Parse ASB connection  string and get auth token">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters">${__groovy(props.get(&quot;ServiceBus__Notifications__ConnectionString&quot;))} ${__groovy(vars.get(&quot;asb_tokenExpirySecs&quot;) ?: &quot;3600&quot;)} </stringProp>
            <stringProp name="filename">${__P(baseDir)}/scripts/generate-asb-vars.groovy</stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script"></stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Notification" enabled="true">
          <stringProp name="HTTPSampler.domain">${__groovy(props.get(&quot;asb_host&quot;))}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__groovy(props.get(&quot;asb_protocol&quot;))}</stringProp>
          <stringProp name="HTTPSampler.path">${__groovy(props.get(&quot;asb_path&quot;))}</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;referenceNumber&quot;: &quot;${referenceNumber}&quot;,&#xd;
  &quot;version&quot;: 2,&#xd;
  &quot;lastUpdated&quot;: &quot;2025-06-02T12:11:00.003Z&quot;,&#xd;
  &quot;lastUpdatedBy&quot;: {&#xd;
    &quot;displayName&quot;: &quot;6df819b220fdd6be2bfa865a3f2a844fd087a9131aac781ce534bdc63efc81d6&quot;,&#xd;
    &quot;userId&quot;: &quot;b17dc1f7-307e-ee11-8179-000d3ab6fed7&quot;&#xd;
  },&#xd;
  &quot;type&quot;: &quot;CVEDA&quot;,&#xd;
  &quot;status&quot;: &quot;VALIDATED&quot;,&#xd;
  &quot;isHighRiskEuImport&quot;: true,  &#xd;
  &quot;partTwo&quot;: {&#xd;
            &quot;decision&quot;: {&#xd;
              &quot;consignmentAcceptable&quot;: true,&#xd;
              &quot;decision&quot;: &quot;Acceptable for Internal Market&quot;&#xd;
            },&#xd;
            &quot;inspectionRequired&quot;: &quot;Not required&quot;&#xd;
          },&#xd;
  &quot;chedTypeVersion&quot;: 1&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate random Notification data">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def suffix = String.format(&quot;%07d&quot;, new Random().nextInt(1_000_000))

def ref = &quot;CHEDA.XX.2025.${suffix}&quot;
log.info(&apos;CHED: &apos; + ref)
vars.put(&quot;referenceNumber&quot;, ref)</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${ASB_AUTH_TOKEN}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Clearnace Request" enabled="false">
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Notification 2" enabled="false">
          <stringProp name="HTTPSampler.domain">${__groovy(props.get(&quot;asb_host&quot;))}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__groovy(props.get(&quot;asb_protocol&quot;))}</stringProp>
          <stringProp name="HTTPSampler.path">${__groovy(props.get(&quot;asb_path&quot;))}</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;referenceNumber&quot;: &quot;${referenceNumber}&quot;,&#xd;
  &quot;version&quot;: 2,&#xd;
  &quot;lastUpdated&quot;: &quot;2025-06-02T12:11:00.003Z&quot;,&#xd;
  &quot;lastUpdatedBy&quot;: {&#xd;
    &quot;displayName&quot;: &quot;6df819b220fdd6be2bfa865a3f2a844fd087a9131aac781ce534bdc63efc81d6&quot;,&#xd;
    &quot;userId&quot;: &quot;b17dc1f7-307e-ee11-8179-000d3ab6fed7&quot;&#xd;
  },&#xd;
  &quot;type&quot;: &quot;CVEDA&quot;,&#xd;
  &quot;status&quot;: &quot;VALIDATED&quot;,&#xd;
  &quot;isHighRiskEuImport&quot;: true,  &#xd;
  &quot;partTwo&quot;: {&#xd;
            &quot;decision&quot;: {&#xd;
              &quot;consignmentAcceptable&quot;: true,&#xd;
              &quot;decision&quot;: &quot;Acceptable for Internal Market&quot;&#xd;
            },&#xd;
            &quot;inspectionRequired&quot;: &quot;Not required&quot;&#xd;
          },&#xd;
  &quot;chedTypeVersion&quot;: 1&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate random Notification data" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def suffix = String.format(&quot;%07d&quot;, new Random().nextInt(1_000_000))

def ref = &quot;CHEDA.XX.2025.${suffix}&quot;
log.info(&apos;CHED: &apos; + ref)
vars.put(&quot;referenceNumber&quot;, ref)</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${ASB_AUTH_TOKEN}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Clearnace Request" enabled="false">
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Finalisation" enabled="false">
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send ALVS Decision" enabled="false">
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <OpenModelThreadGroup guiclass="OpenModelThreadGroupGui" testclass="OpenModelThreadGroup" testname="CDS Errors" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="OpenModelThreadGroupController"/>
      </OpenModelThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <OpenModelThreadGroup guiclass="OpenModelThreadGroupGui" testclass="OpenModelThreadGroup" testname="ALVS Errors" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="OpenModelThreadGroupController"/>
      </OpenModelThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <OpenModelThreadGroup guiclass="OpenModelThreadGroupGui" testclass="OpenModelThreadGroup" testname="Gmrs" enabled="true">
        <stringProp name="OpenModelThreadGroup.schedule">rate(10/min) even_arrivals(1 min)</stringProp>
        <stringProp name="OpenModelThreadGroup.random_seed"> </stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="OpenModelThreadGroupController"/>
      </OpenModelThreadGroup>
      <hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Initialise vars" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Get Props" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="asb_connectionString" elementType="Argument">
                <stringProp name="Argument.name">asb_connectionString</stringProp>
                <stringProp name="Argument.value">${__groovy(props.get(&quot;ServiceBus__Gmrs__ConnectionStringl&quot;))}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ServiceBusProtocol" elementType="Argument">
                <stringProp name="Argument.name">ServiceBusProtocol</stringProp>
                <stringProp name="Argument.value">${__groovy(props.get(&quot;ServiceBus__Gmrs__Protocol&quot;))}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Parse ASB connection  string and get auth token" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters">${__groovy(props.get(&quot;ServiceBus__Gmrs__ConnectionString&quot;))} ${__groovy(vars.get(&quot;asb_tokenExpirySecs&quot;) ?: &quot;3600&quot;)} </stringProp>
            <stringProp name="filename">${__P(baseDir)}/scripts/generate-asb-vars.groovy</stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script"></stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send GMR" enabled="true">
          <stringProp name="HTTPSampler.domain">${asb_host}</stringProp>
          <stringProp name="HTTPSampler.protocol">${ServiceBusProtocol}</stringProp>
          <stringProp name="HTTPSampler.path">${asb_path}</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;GmrId&quot;: &quot;${id}&quot;,&#xd;
  &quot;HaulierEori&quot;: &quot;GB5380138094988&quot;,&#xd;
  &quot;State&quot;: &quot;CHECKED_IN&quot;,&#xd;
  &quot;InspectionRequired&quot;: null,&#xd;
  &quot;ReportToLocations&quot;: null,&#xd;
  &quot;UpdatedDateTime&quot;: &quot;2025-06-04T15:00:00.425Z&quot;,&#xd;
  &quot;Direction&quot;: &quot;UK_INBOUND&quot;,&#xd;
  &quot;HaulierType&quot;: &quot;RMG&quot;,&#xd;
  &quot;IsUnaccompanied&quot;: true,&#xd;
  &quot;VehicleRegNum&quot;: &quot;WICXEB&quot;,&#xd;
  &quot;TrailerRegistrationNums&quot;: [&#xd;
    &quot;IIWSI1&quot;,&#xd;
    &quot;YRSVQM&quot;&#xd;
  ],&#xd;
  &quot;ContainerReferenceNums&quot;: null,&#xd;
  &quot;PlannedCrossing&quot;: {&#xd;
    &quot;RouteId&quot;: &quot;19&quot;,&#xd;
    &quot;LocalDateTimeOfDeparture&quot;: &quot;2025-06-14T15:00:00.000Z&quot;&#xd;
  },&#xd;
  &quot;CheckedInCrossing&quot;: {&#xd;
    &quot;RouteId&quot;: &quot;19&quot;,&#xd;
    &quot;LocalDateTimeOfArrival&quot;: &quot;2025-06-15T15:00:00.000Z&quot;&#xd;
  },&#xd;
  &quot;ActualCrossing&quot;: null,&#xd;
  &quot;Declarations&quot;: {&#xd;
    &quot;Transits&quot;: null,&#xd;
    &quot;Customs&quot;: [&#xd;
      {&#xd;
        &quot;Id&quot;: &quot;25ABCDEF1234567ABC&quot;&#xd;
      }&#xd;
    ]&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Generate random GMR data" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def chars = (&apos;A&apos;..&apos;Z&apos;)  + (&apos;0&apos;..&apos;9&apos;)
def suffix = (1..10).collect { chars[new Random().nextInt(chars.size())] }.join()

def id = &quot;GMR.${suffix}&quot;

log.info(&quot;GMR id: &quot; + id)
vars.put(&quot;id&quot;, id)</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${ASB_AUTH_TOKEN}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <OpenModelThreadGroup guiclass="OpenModelThreadGroupGui" testclass="OpenModelThreadGroup" testname="UI Search Journey" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="OpenModelThreadGroupController"/>
      </OpenModelThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <OpenModelThreadGroup guiclass="OpenModelThreadGroupGui" testclass="OpenModelThreadGroup" testname="PHA API" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="OpenModelThreadGroupController"/>
      </OpenModelThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
